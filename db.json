{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/hexo-theme-gstyle/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/highlight.light.css","path":"css/highlight.light.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/jquery.tocify.css","path":"css/jquery.tocify.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/nav-icon.css","path":"css/nav-icon.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/nav-indicator.css","path":"css/nav-indicator.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/preloader.css","path":"css/preloader.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/prism-customize.css","path":"css/prism-customize.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/smooth-state-anim.css","path":"css/smooth-state-anim.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/waves.min.css","path":"css/waves.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/js/md5.js","path":"js/md5.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.tocify.js","path":"lib/jquery.tocify.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.tocify.min.js","path":"lib/jquery.tocify.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/main.js","path":"lib/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/waves.js","path":"lib/waves.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/waves.min.js","path":"lib/waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/img/hexo-prism.jpg","path":"img/hexo-prism.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/css/animate.css","path":"css/animate.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.js","path":"lib/jquery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/img/baidu_analytics.png","path":"img/baidu_analytics.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery-ui.js","path":"lib/jquery-ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/img/preview.jpg","path":"img/preview.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/img/nav.gif","path":"img/nav.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-gstyle/source/img/toc.gif","path":"img/toc.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"79a22d2a8b58e6be19fa06fd82a9c12d310957c0","modified":1520239355326},{"_id":"themes/hexo-theme-gstyle/_config.yml","hash":"57ac99bbdebf805397f9caf6c5071c3dc0b85d71","modified":1518245337289},{"_id":"themes/hexo-theme-gstyle/.bowerrc","hash":"09b4947b6c6f8e300f4927b96a487f16f02d702a","modified":1517822300030},{"_id":"themes/hexo-theme-gstyle/.gitignore","hash":"3ae96e5dff28cc74ed5719598488db7aa8a51e0b","modified":1517822300033},{"_id":"themes/hexo-theme-gstyle/bower.json","hash":"dbda4578fd305a1cf44d7f8d2b0ea5f82f74822a","modified":1517822300046},{"_id":"themes/hexo-theme-gstyle/package.json","hash":"5d6d55caceba5e280676ea4bf49cf1a939d36c62","modified":1517822300147},{"_id":"themes/hexo-theme-gstyle/README.md","hash":"612d38776ef87d04c3808c85e0f425cca4ba333e","modified":1517822300036},{"_id":"source/_drafts/http-cache.md","hash":"6fe43d7438881b1e0cc500b12d7e25a5849f7f59","modified":1520239355268},{"_id":"source/_posts/Internet通信(一).md","hash":"e9f0327a49405d2458e8aeddcd7dfed51ff034c5","modified":1520239355280},{"_id":"source/_posts/Internet通信（二）.md","hash":"d623d6714d2fae3517fe39bd081a6b68d76382e5","modified":1520239355304},{"_id":"source/_posts/vue-cli构建Vue项目结构分析.md","hash":"ecc65c316620af7c6a1f3221bfc8ee2e09a896ef","modified":1520239355317},{"_id":"source/about/index.md","hash":"650afc49bbfa90e63a63e4d4e90810f65de5a86d","modified":1520239355325},{"_id":"themes/hexo-theme-gstyle/languages/default.yml","hash":"471b751fcaa80b8ad0aa44efeff1390e68f6cb3e","modified":1518232829092},{"_id":"themes/hexo-theme-gstyle/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1517822300049},{"_id":"themes/hexo-theme-gstyle/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1517822300050},{"_id":"themes/hexo-theme-gstyle/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1517822300051},{"_id":"themes/hexo-theme-gstyle/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1517822300053},{"_id":"themes/hexo-theme-gstyle/languages/zh-CN.yml","hash":"a22836ce5850716308c0e93d3bdd8121d872ac78","modified":1518232816543},{"_id":"themes/hexo-theme-gstyle/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1517822300059},{"_id":"themes/hexo-theme-gstyle/layout/index.ejs","hash":"c1ff179d2131149c8a70ba71c6a04be5333b7b4b","modified":1518243731522},{"_id":"themes/hexo-theme-gstyle/layout/archive.ejs","hash":"a4083529a0e46a49c90a3e81c04966fc9a537622","modified":1517822300061},{"_id":"themes/hexo-theme-gstyle/layout/layout.ejs","hash":"85f895c3a8a8efe6aa72bf4ad4f2f40f3345aa73","modified":1517822300073},{"_id":"themes/hexo-theme-gstyle/layout/post.ejs","hash":"d102cf091410d12b322364d32e51a3113e200753","modified":1518232014637},{"_id":"themes/hexo-theme-gstyle/layout/page.ejs","hash":"5bc9a4453d10880fb2c4cd9e4adb44d49decedf3","modified":1518231448240},{"_id":"themes/hexo-theme-gstyle/layout/tag.ejs","hash":"53f6030c30af4d622e5f6d3752ebff512b6b5ce8","modified":1517822300127},{"_id":"themes/hexo-theme-gstyle/layout/category.ejs","hash":"8de51561ef021546a13d60b21fdc0f85d2bba123","modified":1517822300064},{"_id":"themes/hexo-theme-gstyle/layout/partials/analytics.ejs","hash":"4dce4e1847f09d4eca7cb0f753814c186b47ecea","modified":1518054965146},{"_id":"themes/hexo-theme-gstyle/layout/partials/head.ejs","hash":"7200d57a4fa09533eb5457833fa583b90819bc07","modified":1519955317401},{"_id":"themes/hexo-theme-gstyle/layout/partials/comments.ejs","hash":"fbcea659145cf5d6ae6387d44f7131e2847ad00b","modified":1519884156449},{"_id":"themes/hexo-theme-gstyle/layout/partials/footer.ejs","hash":"80a00accc9f16b0cf4e32adf4eabb0c5554a1ab5","modified":1518079693507},{"_id":"themes/hexo-theme-gstyle/layout/partials/nav.ejs","hash":"9bd6fc4a8bca3a2eb05a768adbde128ed85a3245","modified":1518059525336},{"_id":"themes/hexo-theme-gstyle/layout/partials/pagination.ejs","hash":"53dffcafc3941c29afb0a8056f1c8d459b187521","modified":1517822300101},{"_id":"themes/hexo-theme-gstyle/layout/partials/recent-posts.ejs","hash":"130108f9055f155b10f0956147d316d928e503c9","modified":1518169937099},{"_id":"themes/hexo-theme-gstyle/layout/partials/theme.ejs","hash":"93767b1857efcc5acd00874c9d5cad40648f9b57","modified":1517822300108},{"_id":"themes/hexo-theme-gstyle/layout/partials/title_list.ejs","hash":"c43436d84cc1fc4e37dd42ac46948fda9999587a","modified":1517997057386},{"_id":"themes/hexo-theme-gstyle/layout/partials/widgets.ejs","hash":"acbf12e668113df9718e2ca346f4418824c507c7","modified":1517822300116},{"_id":"themes/hexo-theme-gstyle/layout/widget/links.ejs","hash":"508ad441be34549556facd0216ff55d507cb1890","modified":1517822300143},{"_id":"themes/hexo-theme-gstyle/layout/widget/category.ejs","hash":"1321f7e7ae3b81c5b494f8452380be8ecb4425ac","modified":1517822300136},{"_id":"themes/hexo-theme-gstyle/layout/widget/recent_posts.ejs","hash":"39ea263831addcb43f15726e04dac68d06a936d9","modified":1517822300145},{"_id":"themes/hexo-theme-gstyle/layout/widget/archive.ejs","hash":"f6c6012af5b9140dfd42e9aeb757dbd6b8af803e","modified":1517822300132},{"_id":"themes/hexo-theme-gstyle/layout/widget/search.ejs","hash":"cbc7e0188d008a906268eeec5d0652d4b3b6e498","modified":1518079577238},{"_id":"themes/hexo-theme-gstyle/layout/widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1517822300146},{"_id":"themes/hexo-theme-gstyle/layout/widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1517822300147},{"_id":"themes/hexo-theme-gstyle/source/css/gitalk.css","hash":"6fdda7b15721cd74a63b3490ab910fc90479f593","modified":1516094663000},{"_id":"themes/hexo-theme-gstyle/source/css/highlight.css","hash":"2431870cdb202102adc63040bf5e27571fedf3c5","modified":1517822300158},{"_id":"themes/hexo-theme-gstyle/source/css/highlight.light.css","hash":"b1d98142dfb96fbf9e5caac8dfd9a9f0c5e52224","modified":1518245962986},{"_id":"themes/hexo-theme-gstyle/source/css/jquery.tocify.css","hash":"b17222fe485fb63adc9c6dd5e363c1c966d684ac","modified":1518250613541},{"_id":"themes/hexo-theme-gstyle/source/css/main.css","hash":"d3c8fac75fbdca03a1cb5fe710b5bb53397ddb41","modified":1520062341450},{"_id":"themes/hexo-theme-gstyle/source/css/nav-icon.css","hash":"a2af1784a35c0c45fbd7822f5fd957bf41618bec","modified":1517822300176},{"_id":"themes/hexo-theme-gstyle/source/css/nav-indicator.css","hash":"74da03bced8e84c00afe16489c241468e8cdd14e","modified":1517822300178},{"_id":"themes/hexo-theme-gstyle/source/css/preloader.css","hash":"bee313c03c5c87a6e12ed7763bcb86620938ef25","modified":1517822300181},{"_id":"themes/hexo-theme-gstyle/source/css/prism-customize.css","hash":"c80c92fb8fd9551b9bcb9fc6443d5d6410e40239","modified":1517822300185},{"_id":"themes/hexo-theme-gstyle/source/css/smooth-state-anim.css","hash":"9867813f864f1b827c44b336fbf2524e6352a113","modified":1517822300190},{"_id":"themes/hexo-theme-gstyle/source/css/waves.min.css","hash":"fea5aa041122cfaefffccabb843379e408a42093","modified":1517822300195},{"_id":"themes/hexo-theme-gstyle/source/js/main.js","hash":"7aa75b8d8423fbd00ec16c3ea3411ea397453c32","modified":1518161566765},{"_id":"themes/hexo-theme-gstyle/source/js/md5.js","hash":"53900791a9ac36163d0e4b73f6e889a5ba78891a","modified":1516879783636},{"_id":"themes/hexo-theme-gstyle/source/js/search.js","hash":"f19a224abe81e5640576a98591472ecb31e5392c","modified":1518075794831},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.tocify.js","hash":"64692631c4ffc7eb386633717027e2da4d89c95b","modified":1517822300273},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.tocify.min.js","hash":"d45aeb661a77950a35faf236cbe2dac16e27f3bf","modified":1517822300279},{"_id":"themes/hexo-theme-gstyle/source/lib/main.js","hash":"2d9bfd6a53aa830fb2a7a56b1349115ef0ad728f","modified":1518245653146},{"_id":"themes/hexo-theme-gstyle/source/lib/waves.js","hash":"8ae671ffc2936f8ed6a6e551390dad8c4c2f477a","modified":1517822300288},{"_id":"themes/hexo-theme-gstyle/source/lib/waves.min.js","hash":"273e47923573d9f566359535df0b418334fafc26","modified":1517822300292},{"_id":"themes/hexo-theme-gstyle/source/img/hexo-prism.jpg","hash":"21ffe6b6fe22a57b652c83dbceb1985253bee9e2","modified":1517822300207},{"_id":"themes/hexo-theme-gstyle/source/css/animate.css","hash":"a9eca03f4e348ba26a21ac08d5a4e60692416ae5","modified":1517822300156},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery.js","hash":"bdf4341e4e6396f88f789ec58cca5aa2a4c02d5c","modified":1517822300270},{"_id":"source/_drafts/http-cache/img/request.jpg","hash":"395eb298288423cdce402345e76f37ae6c8dcfba","modified":1520239355276},{"_id":"source/_posts/Internet通信(一)/img/dynamicIP.png","hash":"b000d8b5abcdbed4213b6e5a567b9df741edacf8","modified":1520239355291},{"_id":"source/_posts/Internet通信(一)/img/mac.jpg","hash":"e736fe83c961d23b4485770db99b37a028d727ad","modified":1520239355297},{"_id":"source/_posts/Internet通信(一)/img/internet.png","hash":"364f2c97b201829f7d33e62eee01eb7f20e22ee8","modified":1520239355294},{"_id":"source/_posts/Internet通信(一)/img/staticIP.png","hash":"78f1a96969609be72f9c98dae25d36a566ff313f","modified":1520239355300},{"_id":"source/_posts/Internet通信(一)/img/url.png","hash":"ebd70bb1d39d3462f16ac43c96ffb78ee2305070","modified":1520239355302},{"_id":"source/_posts/Internet通信（二）/img/ARP.jpg","hash":"5ff0f0aed9ed2dcc44e7351fff909c921a152298","modified":1520239355311},{"_id":"source/_posts/Internet通信（二）/img/gateway.png","hash":"9483c6e6fc65f78701d66af1d4c9242dfc1190fa","modified":1520239355313},{"_id":"themes/hexo-theme-gstyle/source/img/baidu_analytics.png","hash":"4045c43feafa5a034ded30159d5c6eb0b2922f2a","modified":1517822300202},{"_id":"themes/hexo-theme-gstyle/source/lib/jquery-ui.js","hash":"e5127efa85d15eb9ff1cdda4a482449e02d8c4bc","modified":1517822300264},{"_id":"source/_posts/Internet通信(一)/img/detail.jpg","hash":"2add82820485e2e94ff6cf23513ac8d7904d40d1","modified":1520239355284},{"_id":"themes/hexo-theme-gstyle/source/img/preview.jpg","hash":"4b50945c990005cde3f5efcf497a4f5ce3530101","modified":1517822300221},{"_id":"source/_posts/vue-cli构建Vue项目结构分析/img/project.png","hash":"03e76d9b87775901f75ae577dbabce5322a4ef3b","modified":1520239355322},{"_id":"themes/hexo-theme-gstyle/source/img/nav.gif","hash":"7091e4348e6027a1073a58be7ac28b72895afdaf","modified":1517822300214},{"_id":"source/_posts/Internet通信(一)/img/dns.png","hash":"1b8a91f2ead6251456e244a206a312fbd363c9f5","modified":1520239355290},{"_id":"themes/hexo-theme-gstyle/source/js/gitalk.js","hash":"b5624a1298ea25825574fae9849df467089ad419","modified":1519884299045},{"_id":"themes/hexo-theme-gstyle/source/img/toc.gif","hash":"d6a61f7b9ac47c8daebf4347a79a953243486329","modified":1517822300236},{"_id":"public/search.xml","hash":"e41f6be3dba52158b073a4ad62ae5d1204dfd910","modified":1520239660237},{"_id":"public/about/index.html","hash":"9c65767572a94b87457b68a0f8c5b1fe3801ca0a","modified":1520239660308},{"_id":"public/2018/03/02/Internet通信（二）/index.html","hash":"eebafdb3300926bb77a60eab1035d62afbb4e1a2","modified":1520239660308},{"_id":"public/archives/index.html","hash":"789a1563dc28f7e6d94f167600f24efdec186173","modified":1520239660310},{"_id":"public/archives/2018/index.html","hash":"a2d385928e06d5542f5e6e8170116084a660ea88","modified":1520239660310},{"_id":"public/archives/2018/02/index.html","hash":"2d5789cd836add39d19f7529a325eeb3740c9d43","modified":1520239660310},{"_id":"public/archives/2018/03/index.html","hash":"7edd0e585e8c2622df99fb0c9a3feb2cfad2793a","modified":1520239660310},{"_id":"public/tags/Internet/index.html","hash":"4ff9744f80862d765e630c9fa07a4556e8dcde82","modified":1520239660311},{"_id":"public/index.html","hash":"bc034805f5d3a5cb1a643a71f6a4fdfeaf4493c5","modified":1520239660311},{"_id":"public/tags/计算机网络基础/index.html","hash":"1a55b38fc280450393a08656ea10b32cb13cf9dc","modified":1520239660311},{"_id":"public/tags/vue/index.html","hash":"bba271961dc8d1e5dd49dc5d4a860740041ef2a1","modified":1520239660311},{"_id":"public/2018/02/27/Internet通信(一)/index.html","hash":"8dfc511071e99e0cd8e4b198cd08749d925937e0","modified":1520239660311},{"_id":"public/2018/02/10/vue-cli构建Vue项目结构分析/index.html","hash":"23a8c71005069ca7cf25e9c4b4dde9593bb2a078","modified":1520239660312},{"_id":"public/favicon.ico","hash":"79a22d2a8b58e6be19fa06fd82a9c12d310957c0","modified":1520239660345},{"_id":"public/2018/02/26/http-cache/img/request.jpg","hash":"395eb298288423cdce402345e76f37ae6c8dcfba","modified":1520239660345},{"_id":"public/2018/02/27/Internet通信(一)/img/dynamicIP.png","hash":"b000d8b5abcdbed4213b6e5a567b9df741edacf8","modified":1520239660345},{"_id":"public/2018/02/27/Internet通信(一)/img/mac.jpg","hash":"e736fe83c961d23b4485770db99b37a028d727ad","modified":1520239660345},{"_id":"public/2018/02/27/Internet通信(一)/img/internet.png","hash":"364f2c97b201829f7d33e62eee01eb7f20e22ee8","modified":1520239660345},{"_id":"public/2018/02/27/Internet通信(一)/img/staticIP.png","hash":"78f1a96969609be72f9c98dae25d36a566ff313f","modified":1520239660345},{"_id":"public/2018/02/27/Internet通信(一)/img/url.png","hash":"ebd70bb1d39d3462f16ac43c96ffb78ee2305070","modified":1520239660345},{"_id":"public/2018/03/02/Internet通信（二）/img/ARP.jpg","hash":"5ff0f0aed9ed2dcc44e7351fff909c921a152298","modified":1520239660345},{"_id":"public/2018/03/02/Internet通信（二）/img/gateway.png","hash":"9483c6e6fc65f78701d66af1d4c9242dfc1190fa","modified":1520239660345},{"_id":"public/img/hexo-prism.jpg","hash":"21ffe6b6fe22a57b652c83dbceb1985253bee9e2","modified":1520239660356},{"_id":"public/css/highlight.css","hash":"3674d062791bc005f8d4987eaf79a9c1b6d16eb9","modified":1520239660433},{"_id":"public/css/highlight.light.css","hash":"dc57b14c6e8e3188d438307eed0dda33de8afd34","modified":1520239660433},{"_id":"public/css/jquery.tocify.css","hash":"ed6db1aabacce4cfdeb0e1020de8d8796c09cda9","modified":1520239660433},{"_id":"public/css/main.css","hash":"d1fb881eb6b073457eab7c2cd1e575f59dcf0da0","modified":1520239660434},{"_id":"public/css/nav-icon.css","hash":"4ea87d095806b91ebd63edc531c51ba7ee8ce932","modified":1520239660434},{"_id":"public/css/nav-indicator.css","hash":"4648f75060594841bcca07ebeaf99bd719f8e3d6","modified":1520239660434},{"_id":"public/css/preloader.css","hash":"6a64d0102ab21502b0ac11ca635a917f14c7cb73","modified":1520239660434},{"_id":"public/css/prism-customize.css","hash":"41208d4202cfbecdbfa25c987aabb24cc94a8e09","modified":1520239660434},{"_id":"public/css/smooth-state-anim.css","hash":"29d6e7f5f4973e1286e9fceea7c145fe6eb2c65f","modified":1520239660434},{"_id":"public/css/waves.min.css","hash":"b26d49b199692a2207c36c2e536f9a4feb74a7cc","modified":1520239660435},{"_id":"public/js/main.js","hash":"2ce4b49c7ad6237d931ec5ea37eb9e49a0aa6551","modified":1520239660435},{"_id":"public/js/search.js","hash":"2584a5b826d94574e9c6be5af80a23d6c3ec2884","modified":1520239660435},{"_id":"public/lib/jquery.tocify.min.js","hash":"b57e1570be4599b7b1e28a21cad309345f081571","modified":1520239660435},{"_id":"public/lib/main.js","hash":"3f40da2b493e8ecb06718e6adbb52f8fd59ca567","modified":1520239660435},{"_id":"public/lib/waves.min.js","hash":"9b955c7464e32ef9c641537b2e9bc3e50506a3a7","modified":1520239660435},{"_id":"public/css/gitalk.css","hash":"6fdda7b15721cd74a63b3490ab910fc90479f593","modified":1520239660436},{"_id":"public/js/md5.js","hash":"53900791a9ac36163d0e4b73f6e889a5ba78891a","modified":1520239660436},{"_id":"public/lib/jquery.tocify.js","hash":"267e630d55bedaaa66c5c7150a240ef489f0b495","modified":1520239660436},{"_id":"public/lib/waves.js","hash":"3fe0509fbbf82fe340bfe86e7ddb7bda8b1ae309","modified":1520239660436},{"_id":"public/css/animate.css","hash":"706475f47013d79b7e7cbe84e3cda2b52b18875d","modified":1520239660436},{"_id":"public/lib/jquery.js","hash":"3b0f35285a7088b1fd321773696f9d3b45d31942","modified":1520239660436},{"_id":"public/lib/jquery-ui.js","hash":"8689f0993aa736965899d1e3bbe40c3378416191","modified":1520239660437},{"_id":"public/js/gitalk.js","hash":"b5624a1298ea25825574fae9849df467089ad419","modified":1520239660437},{"_id":"public/img/baidu_analytics.png","hash":"4045c43feafa5a034ded30159d5c6eb0b2922f2a","modified":1520239660437},{"_id":"public/2018/02/27/Internet通信(一)/img/detail.jpg","hash":"2add82820485e2e94ff6cf23513ac8d7904d40d1","modified":1520239660437},{"_id":"public/2018/02/10/vue-cli构建Vue项目结构分析/img/project.png","hash":"03e76d9b87775901f75ae577dbabce5322a4ef3b","modified":1520239660446},{"_id":"public/img/preview.jpg","hash":"4b50945c990005cde3f5efcf497a4f5ce3530101","modified":1520239660452},{"_id":"public/2018/02/27/Internet通信(一)/img/dns.png","hash":"1b8a91f2ead6251456e244a206a312fbd363c9f5","modified":1520239660452},{"_id":"public/img/nav.gif","hash":"7091e4348e6027a1073a58be7ac28b72895afdaf","modified":1520239660454},{"_id":"public/img/toc.gif","hash":"d6a61f7b9ac47c8daebf4347a79a953243486329","modified":1520239660547}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-02-07T08:53:17.000Z","comments":0,"_content":"暂无内容","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-07 16:53:17\ncomments: false\n---\n暂无内容","updated":"2018-03-05T08:42:35.325Z","path":"about/index.html","layout":"page","_id":"cjedzfwnk0001pkl1mg2acty6","content":"<p>暂无内容</p>\n","site":{"data":{}},"excerpt":"","more":"<p>暂无内容</p>\n"}],"Post":[{"title":"Internet通信(一)","comments":1,"date":"2018-02-27T09:13:31.000Z","updated":"2018-03-01T12:55:31.000Z","description":"网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：\"从浏览器输入url至呈现整个页面\"。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述。","toc":true,"_content":"## 概述\n网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：\"从浏览器输入url至呈现整个页面\"。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述，如若描述有误，敬请指正。\n\n在分析网络通信之前，我们不妨好好思考一下这个问题？\n```\n当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？\n```\n![url](img/url.png)\n\n这涉及到整个Internet通信的过程，涉及的范围非常大，我粗略归结为以下几个过程：\n - DNS域名解析\n - 确定接收方MAC地址\n - TCP链接\n - HTTP请求\n - 浏览器渲染页面\n\n在分析该过程之前，我们先了解一些网络的基本知识以及相关协议。\n\n## 网络模型\n 网络可分为七层，四层或者五层模型，这里我们将网络分为五层，网络五层模型，如下图：\n![Internet](img/internet.png)\n自上而下，分别为应用层，传输层，网络层，链接层和实体层（物理层），每层都有相关的协议和功能，并且都需要下一层的支持。他们的功能及依赖关系，我们可以大概了解，如图(点击放大)：\n![Internet Detail](img/detail.jpg)\n 1. 应用层HTTP协议的通信请求，规定应用程序的数据格式，基于传输层TCP协议的TCP连接\n \n 2. 传输层的TCP连接，负责传输数据包，基于网络层的IP协议分配IP地址连通网络和链接层的MAC地址(网卡地址)确认接收主机\n\n 3. 网络层的数据发送，基于链接层将实体层发出的电信号分组并解读，并通过ARP协议利用IP地址获取到MAC地址(网卡地址)\n\n 4. 实体层（物理层），就是电脑间链接的介质，比如光纤，电缆等等，主要负责传送0和1的电信号\n\n由此，我们不难得出Internet通信的前提是必须知道双方的**IP地址**和**MAC地址(网卡地址，以太网的物理地址)**，IP地址负责确定接收方的子网，MAC地址负责确定接收方的主机地址。\n\n-----------------\n\n## MAC地址\n\n以太网规定，连入网络的所有设备，都必须要有一块网卡，因为数据包必须从一块网卡传送到另一块网卡，而网卡的地址，就是数据包发送和接收的地址，这就叫做**MAC地址**。\n\n每块网卡都拥有一个全世界唯一的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。如图：\n![MAC地址](img/mac.jpg)\n\n## IP地址\nInternet通信的前提是必须知道双方的**IP地址**和**MAC地址**，己方的**MAC地址**是必然知道的，但是**IP地址**是否知道却分为两种情况：\n- 静态IP地址\n- 动态IP地址\n\n### 静态IP地址\n静态IP地址需要用户自己专门设置，如图\n![静态IP地址](img/staticIP.png)\n- **IP地址** -- 互联网的协议地址\n\n- **子网掩码** -- 用于判断两个IP地址是否在同一个子网络中\n\n- **默认网关** -- 连接两个不同的子网络，转换协议\n\n- **DNS服务器** -- 用于DNS解析，将域名解析为IP地址\n\n以上的四个参数缺一不可，使用手动设置的参数，每次计算机开机都可以使用相同的IP地址（如图使用的固定IP地址是：192.168.0.198）上网，所以这种情况被称为：\"静态IP地址上网\"，但是这样的设置是极少数人会做的，大多数人使用的都是\"动态IP地址上网\"。\n\n注：通用的公共DNS服务器有Google的8.8.8.8和国内的114.114.114.114，当然也可以使用运营商提供的DNS服务器。\n\n### 动态IP地址\n动态IP地址，是每台计算机默认采用的上网方式，不需要用户手动设置，每次开机会自动分配一个IP地址，如图\n![动态IP地址](img/dynamicIP.png)\n动态分配IP地址，会使用到**DHCP协议**，该协议规定在每个子网络中都会一台计算机负责管理本网络的所有IP地址，该计算机叫做**\"DHCP服务器\"**，每台计算机开机时候都会向**\"DHCP服务器\"**发送一个**\"DHCP请求\"**数据包，申请IP地址和相关的网络参数（子网掩码，默认网关和DNS服务器等等）。但是问题来了。。。\n```\nDHCP服务器的MAC地址，IP地址和本机的IP地址都不知道，该如何通信？\n```\n\n**DHCP协议**对**\"DHCP请求\"**的数据包做了特定的规定，发出方发送的DHCP数据包：\n- 发出方本机的MAC地址和本机未知的IP地址为0.0.0.0\n\n- 由于接收方DHCP服务器的信息都不知道，所以接收方的MAC地址则填写为FF-FF-FF-FF-FF-FF，IP地址填写为255.255.255.255。\n\n该数据包在以太网以广播的方式传输，在同一子网络的每台计算机都会接收到该数据包，并分析数据包的接收方IP地址是否与自己的IP地址相匹配，当DHCP服务器接收到该数据包，并分析到该数据包的发出方IP地址为0.0.0.0，接收方IP地址为255.255.255.255，则会确认该数据包是发送给自己的，接下来就会进行IP地址分配，再响应发送回去一个\"DHCP响应\"的数据包，新加入的计算机接收到该响应包，就可以确定了本机的IP地址，子网掩码，默认网关和DNS服务器等相关信息，然后就可以上网了。\n\n-------\n\n有了以上的基础知识，我们回到以下这个问题\n```\n当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？\n```\n呈现页面的数据必须通过网络来发送和接收数据，但Internet通信的前提是必须先知道双方的MAC地址和IP地址，本机的MAC地址是必然知道的，IP地址则可以使用静态和动态IP的方式确定，那么我们只需要确定对方的MAC地址和IP地址即可实现通信。\n\n我们在浏览器输入的是**www.qq.com**，这是一个域名，域名在互联网中是没有什么意思的，只是为了方便用户记忆理解，但是在互联网中每个域名都可以通过DNS域名解析，解析成一个或者多个IP地址，解析确定对方的IP地址后，可以通过IP地址找到对应的主机，并确认该主机的MAC地址，最后实现通信，首先我们分析DNS域名解析的过程。\n\n## DNS域名解析\nDNS（Domain Name System 的缩写）域名解析的作用是将域名解析为IP地址，具体过程如图\n![dns](img/dns.png)\n\n1. 本机DNS解析\n    - 浏览器缓存中查找www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析\n\n    - 在本机操作系统的DNS缓存和host文件查找www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求\n\n2. 本地DNS服务器解析\n    - 本地DNS服务器的IP地址根据用户的静态IP地址和动态IP地址设置而定，首先客户端向本地DNS服务器（LDNS）发出域名解析请求\n\n    - 本地DNS服务器先在域名解析记录缓存中查找，是否存在www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time to live 的缩写），表示缓存时间，解析结束；若不存在，则向根域名服务器发出解析请求，使用**递归查询**的方法进行查询\n\n3. 根域名服务器解析\n    - www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做\"顶级域名\"，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求\n\n4. 顶级域名服务器解析\n    - 顶级域名服务器**.com**对www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求\n\n5. 次级域名服务器解析\n    - 次级域名服务器**.qq.com**对www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time to live 的缩写），表示缓存时间，返回给本地DNS服务器，本地DNS服务器将该结果缓存，再将IP地址返回给客户端，客户端将该解析记录缓存，至此DNS解析结束\n\n### DNS优化\n由于DNS解析的过程十分复杂费时，所以DNS存在着多级缓存，提取DNS缓存的顺序大概如下：浏览器DNS缓存 -- 系统DNS缓存 -- 本地DNS服务器缓存 -- 根域名服务器缓存 -- 顶级域名服务器缓存 -- 次级域名服务器缓存，解析记录的缓存时间由解析成功返回的TTL值（Time to live 的缩写）决定。\n\n## 总结\n至此，网络的基础知识和DNS域名解析讲完了，下节继续分析**使用IP地址确定MAC地址**和**TCP链接**。","source":"_posts/Internet通信(一).md","raw":"---\ntitle: Internet通信(一)\ncomments: true\ndate: 2018-02-27 17:13:31\nupdated: 2018-03-01 20:55:31\ndescription: 网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：\"从浏览器输入url至呈现整个页面\"。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述。\ntoc: true\ntags:\n - Internet \n - 计算机网络基础\n\n---\n## 概述\n网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：\"从浏览器输入url至呈现整个页面\"。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述，如若描述有误，敬请指正。\n\n在分析网络通信之前，我们不妨好好思考一下这个问题？\n```\n当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？\n```\n![url](img/url.png)\n\n这涉及到整个Internet通信的过程，涉及的范围非常大，我粗略归结为以下几个过程：\n - DNS域名解析\n - 确定接收方MAC地址\n - TCP链接\n - HTTP请求\n - 浏览器渲染页面\n\n在分析该过程之前，我们先了解一些网络的基本知识以及相关协议。\n\n## 网络模型\n 网络可分为七层，四层或者五层模型，这里我们将网络分为五层，网络五层模型，如下图：\n![Internet](img/internet.png)\n自上而下，分别为应用层，传输层，网络层，链接层和实体层（物理层），每层都有相关的协议和功能，并且都需要下一层的支持。他们的功能及依赖关系，我们可以大概了解，如图(点击放大)：\n![Internet Detail](img/detail.jpg)\n 1. 应用层HTTP协议的通信请求，规定应用程序的数据格式，基于传输层TCP协议的TCP连接\n \n 2. 传输层的TCP连接，负责传输数据包，基于网络层的IP协议分配IP地址连通网络和链接层的MAC地址(网卡地址)确认接收主机\n\n 3. 网络层的数据发送，基于链接层将实体层发出的电信号分组并解读，并通过ARP协议利用IP地址获取到MAC地址(网卡地址)\n\n 4. 实体层（物理层），就是电脑间链接的介质，比如光纤，电缆等等，主要负责传送0和1的电信号\n\n由此，我们不难得出Internet通信的前提是必须知道双方的**IP地址**和**MAC地址(网卡地址，以太网的物理地址)**，IP地址负责确定接收方的子网，MAC地址负责确定接收方的主机地址。\n\n-----------------\n\n## MAC地址\n\n以太网规定，连入网络的所有设备，都必须要有一块网卡，因为数据包必须从一块网卡传送到另一块网卡，而网卡的地址，就是数据包发送和接收的地址，这就叫做**MAC地址**。\n\n每块网卡都拥有一个全世界唯一的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。如图：\n![MAC地址](img/mac.jpg)\n\n## IP地址\nInternet通信的前提是必须知道双方的**IP地址**和**MAC地址**，己方的**MAC地址**是必然知道的，但是**IP地址**是否知道却分为两种情况：\n- 静态IP地址\n- 动态IP地址\n\n### 静态IP地址\n静态IP地址需要用户自己专门设置，如图\n![静态IP地址](img/staticIP.png)\n- **IP地址** -- 互联网的协议地址\n\n- **子网掩码** -- 用于判断两个IP地址是否在同一个子网络中\n\n- **默认网关** -- 连接两个不同的子网络，转换协议\n\n- **DNS服务器** -- 用于DNS解析，将域名解析为IP地址\n\n以上的四个参数缺一不可，使用手动设置的参数，每次计算机开机都可以使用相同的IP地址（如图使用的固定IP地址是：192.168.0.198）上网，所以这种情况被称为：\"静态IP地址上网\"，但是这样的设置是极少数人会做的，大多数人使用的都是\"动态IP地址上网\"。\n\n注：通用的公共DNS服务器有Google的8.8.8.8和国内的114.114.114.114，当然也可以使用运营商提供的DNS服务器。\n\n### 动态IP地址\n动态IP地址，是每台计算机默认采用的上网方式，不需要用户手动设置，每次开机会自动分配一个IP地址，如图\n![动态IP地址](img/dynamicIP.png)\n动态分配IP地址，会使用到**DHCP协议**，该协议规定在每个子网络中都会一台计算机负责管理本网络的所有IP地址，该计算机叫做**\"DHCP服务器\"**，每台计算机开机时候都会向**\"DHCP服务器\"**发送一个**\"DHCP请求\"**数据包，申请IP地址和相关的网络参数（子网掩码，默认网关和DNS服务器等等）。但是问题来了。。。\n```\nDHCP服务器的MAC地址，IP地址和本机的IP地址都不知道，该如何通信？\n```\n\n**DHCP协议**对**\"DHCP请求\"**的数据包做了特定的规定，发出方发送的DHCP数据包：\n- 发出方本机的MAC地址和本机未知的IP地址为0.0.0.0\n\n- 由于接收方DHCP服务器的信息都不知道，所以接收方的MAC地址则填写为FF-FF-FF-FF-FF-FF，IP地址填写为255.255.255.255。\n\n该数据包在以太网以广播的方式传输，在同一子网络的每台计算机都会接收到该数据包，并分析数据包的接收方IP地址是否与自己的IP地址相匹配，当DHCP服务器接收到该数据包，并分析到该数据包的发出方IP地址为0.0.0.0，接收方IP地址为255.255.255.255，则会确认该数据包是发送给自己的，接下来就会进行IP地址分配，再响应发送回去一个\"DHCP响应\"的数据包，新加入的计算机接收到该响应包，就可以确定了本机的IP地址，子网掩码，默认网关和DNS服务器等相关信息，然后就可以上网了。\n\n-------\n\n有了以上的基础知识，我们回到以下这个问题\n```\n当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？\n```\n呈现页面的数据必须通过网络来发送和接收数据，但Internet通信的前提是必须先知道双方的MAC地址和IP地址，本机的MAC地址是必然知道的，IP地址则可以使用静态和动态IP的方式确定，那么我们只需要确定对方的MAC地址和IP地址即可实现通信。\n\n我们在浏览器输入的是**www.qq.com**，这是一个域名，域名在互联网中是没有什么意思的，只是为了方便用户记忆理解，但是在互联网中每个域名都可以通过DNS域名解析，解析成一个或者多个IP地址，解析确定对方的IP地址后，可以通过IP地址找到对应的主机，并确认该主机的MAC地址，最后实现通信，首先我们分析DNS域名解析的过程。\n\n## DNS域名解析\nDNS（Domain Name System 的缩写）域名解析的作用是将域名解析为IP地址，具体过程如图\n![dns](img/dns.png)\n\n1. 本机DNS解析\n    - 浏览器缓存中查找www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析\n\n    - 在本机操作系统的DNS缓存和host文件查找www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求\n\n2. 本地DNS服务器解析\n    - 本地DNS服务器的IP地址根据用户的静态IP地址和动态IP地址设置而定，首先客户端向本地DNS服务器（LDNS）发出域名解析请求\n\n    - 本地DNS服务器先在域名解析记录缓存中查找，是否存在www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time to live 的缩写），表示缓存时间，解析结束；若不存在，则向根域名服务器发出解析请求，使用**递归查询**的方法进行查询\n\n3. 根域名服务器解析\n    - www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做\"顶级域名\"，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求\n\n4. 顶级域名服务器解析\n    - 顶级域名服务器**.com**对www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求\n\n5. 次级域名服务器解析\n    - 次级域名服务器**.qq.com**对www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time to live 的缩写），表示缓存时间，返回给本地DNS服务器，本地DNS服务器将该结果缓存，再将IP地址返回给客户端，客户端将该解析记录缓存，至此DNS解析结束\n\n### DNS优化\n由于DNS解析的过程十分复杂费时，所以DNS存在着多级缓存，提取DNS缓存的顺序大概如下：浏览器DNS缓存 -- 系统DNS缓存 -- 本地DNS服务器缓存 -- 根域名服务器缓存 -- 顶级域名服务器缓存 -- 次级域名服务器缓存，解析记录的缓存时间由解析成功返回的TTL值（Time to live 的缩写）决定。\n\n## 总结\n至此，网络的基础知识和DNS域名解析讲完了，下节继续分析**使用IP地址确定MAC地址**和**TCP链接**。","slug":"Internet通信(一)","published":1,"layout":"post","photos":[],"link":"","_id":"cjedzfwnb0000pkl1mz96zj8i","content":"<h2 id=\"概述\"><a href=\"/2018/02/27/Internet通信(一)/#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：”从浏览器输入url至呈现整个页面”。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述，如若描述有误，敬请指正。</p>\n<p>在分析网络通信之前，我们不妨好好思考一下这个问题？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/27/Internet通信(一)/img/url.png\" alt=\"url\"></p>\n<p>这涉及到整个Internet通信的过程，涉及的范围非常大，我粗略归结为以下几个过程：</p>\n<ul>\n<li>DNS域名解析</li>\n<li>确定接收方MAC地址</li>\n<li>TCP链接</li>\n<li>HTTP请求</li>\n<li>浏览器渲染页面</li>\n</ul>\n<p>在分析该过程之前，我们先了解一些网络的基本知识以及相关协议。</p>\n<h2 id=\"网络模型\"><a href=\"/2018/02/27/Internet通信(一)/#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h2><p> 网络可分为七层，四层或者五层模型，这里我们将网络分为五层，网络五层模型，如下图：<br><img src=\"/2018/02/27/Internet通信(一)/img/internet.png\" alt=\"Internet\"><br>自上而下，分别为应用层，传输层，网络层，链接层和实体层（物理层），每层都有相关的协议和功能，并且都需要下一层的支持。他们的功能及依赖关系，我们可以大概了解，如图(点击放大)：<br><img src=\"/2018/02/27/Internet通信(一)/img/detail.jpg\" alt=\"Internet Detail\"></p>\n<ol>\n<li><p>应用层HTTP协议的通信请求，规定应用程序的数据格式，基于传输层TCP协议的TCP连接</p>\n</li>\n<li><p>传输层的TCP连接，负责传输数据包，基于网络层的IP协议分配IP地址连通网络和链接层的MAC地址(网卡地址)确认接收主机</p>\n</li>\n<li><p>网络层的数据发送，基于链接层将实体层发出的电信号分组并解读，并通过ARP协议利用IP地址获取到MAC地址(网卡地址)</p>\n</li>\n<li><p>实体层（物理层），就是电脑间链接的介质，比如光纤，电缆等等，主要负责传送0和1的电信号</p>\n</li>\n</ol>\n<p>由此，我们不难得出Internet通信的前提是必须知道双方的<strong>IP地址</strong>和<strong>MAC地址(网卡地址，以太网的物理地址)</strong>，IP地址负责确定接收方的子网，MAC地址负责确定接收方的主机地址。</p>\n<hr>\n<h2 id=\"MAC地址\"><a href=\"/2018/02/27/Internet通信(一)/#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h2><p>以太网规定，连入网络的所有设备，都必须要有一块网卡，因为数据包必须从一块网卡传送到另一块网卡，而网卡的地址，就是数据包发送和接收的地址，这就叫做<strong>MAC地址</strong>。</p>\n<p>每块网卡都拥有一个全世界唯一的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。如图：<br><img src=\"/2018/02/27/Internet通信(一)/img/mac.jpg\" alt=\"MAC地址\"></p>\n<h2 id=\"IP地址\"><a href=\"/2018/02/27/Internet通信(一)/#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>Internet通信的前提是必须知道双方的<strong>IP地址</strong>和<strong>MAC地址</strong>，己方的<strong>MAC地址</strong>是必然知道的，但是<strong>IP地址</strong>是否知道却分为两种情况：</p>\n<ul>\n<li>静态IP地址</li>\n<li>动态IP地址</li>\n</ul>\n<h3 id=\"静态IP地址\"><a href=\"/2018/02/27/Internet通信(一)/#静态IP地址\" class=\"headerlink\" title=\"静态IP地址\"></a>静态IP地址</h3><p>静态IP地址需要用户自己专门设置，如图<br><img src=\"/2018/02/27/Internet通信(一)/img/staticIP.png\" alt=\"静态IP地址\"></p>\n<ul>\n<li><p><strong>IP地址</strong> – 互联网的协议地址</p>\n</li>\n<li><p><strong>子网掩码</strong> – 用于判断两个IP地址是否在同一个子网络中</p>\n</li>\n<li><p><strong>默认网关</strong> – 连接两个不同的子网络，转换协议</p>\n</li>\n<li><p><strong>DNS服务器</strong> – 用于DNS解析，将域名解析为IP地址</p>\n</li>\n</ul>\n<p>以上的四个参数缺一不可，使用手动设置的参数，每次计算机开机都可以使用相同的IP地址（如图使用的固定IP地址是：192.168.0.198）上网，所以这种情况被称为：”静态IP地址上网”，但是这样的设置是极少数人会做的，大多数人使用的都是”动态IP地址上网”。</p>\n<p>注：通用的公共DNS服务器有Google的8.8.8.8和国内的114.114.114.114，当然也可以使用运营商提供的DNS服务器。</p>\n<h3 id=\"动态IP地址\"><a href=\"/2018/02/27/Internet通信(一)/#动态IP地址\" class=\"headerlink\" title=\"动态IP地址\"></a>动态IP地址</h3><p>动态IP地址，是每台计算机默认采用的上网方式，不需要用户手动设置，每次开机会自动分配一个IP地址，如图<br><img src=\"/2018/02/27/Internet通信(一)/img/dynamicIP.png\" alt=\"动态IP地址\"><br>动态分配IP地址，会使用到<strong>DHCP协议</strong>，该协议规定在每个子网络中都会一台计算机负责管理本网络的所有IP地址，该计算机叫做<strong>“DHCP服务器”</strong>，每台计算机开机时候都会向<strong>“DHCP服务器”</strong>发送一个<strong>“DHCP请求”</strong>数据包，申请IP地址和相关的网络参数（子网掩码，默认网关和DNS服务器等等）。但是问题来了。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DHCP服务器的MAC地址，IP地址和本机的IP地址都不知道，该如何通信？</span><br></pre></td></tr></table></figure></p>\n<p><strong>DHCP协议</strong>对<strong>“DHCP请求”</strong>的数据包做了特定的规定，发出方发送的DHCP数据包：</p>\n<ul>\n<li><p>发出方本机的MAC地址和本机未知的IP地址为0.0.0.0</p>\n</li>\n<li><p>由于接收方DHCP服务器的信息都不知道，所以接收方的MAC地址则填写为FF-FF-FF-FF-FF-FF，IP地址填写为255.255.255.255。</p>\n</li>\n</ul>\n<p>该数据包在以太网以广播的方式传输，在同一子网络的每台计算机都会接收到该数据包，并分析数据包的接收方IP地址是否与自己的IP地址相匹配，当DHCP服务器接收到该数据包，并分析到该数据包的发出方IP地址为0.0.0.0，接收方IP地址为255.255.255.255，则会确认该数据包是发送给自己的，接下来就会进行IP地址分配，再响应发送回去一个”DHCP响应”的数据包，新加入的计算机接收到该响应包，就可以确定了本机的IP地址，子网掩码，默认网关和DNS服务器等相关信息，然后就可以上网了。</p>\n<hr>\n<p>有了以上的基础知识，我们回到以下这个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？</span><br></pre></td></tr></table></figure></p>\n<p>呈现页面的数据必须通过网络来发送和接收数据，但Internet通信的前提是必须先知道双方的MAC地址和IP地址，本机的MAC地址是必然知道的，IP地址则可以使用静态和动态IP的方式确定，那么我们只需要确定对方的MAC地址和IP地址即可实现通信。</p>\n<p>我们在浏览器输入的是<strong><a href=\"http://www.qq.com\" target=\"_blank\" rel=\"noopener\">www.qq.com</a></strong>，这是一个域名，域名在互联网中是没有什么意思的，只是为了方便用户记忆理解，但是在互联网中每个域名都可以通过DNS域名解析，解析成一个或者多个IP地址，解析确定对方的IP地址后，可以通过IP地址找到对应的主机，并确认该主机的MAC地址，最后实现通信，首先我们分析DNS域名解析的过程。</p>\n<h2 id=\"DNS域名解析\"><a href=\"/2018/02/27/Internet通信(一)/#DNS域名解析\" class=\"headerlink\" title=\"DNS域名解析\"></a>DNS域名解析</h2><p>DNS（Domain Name System 的缩写）域名解析的作用是将域名解析为IP地址，具体过程如图<br><img src=\"/2018/02/27/Internet通信(一)/img/dns.png\" alt=\"dns\"></p>\n<ol>\n<li><p>本机DNS解析</p>\n<ul>\n<li><p>浏览器缓存中查找<a href=\"http://www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析\" target=\"_blank\" rel=\"noopener\">www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析</a></p>\n</li>\n<li><p>在本机操作系统的DNS缓存和host文件查找<a href=\"http://www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求</a></p>\n</li>\n</ul>\n</li>\n<li><p>本地DNS服务器解析</p>\n<ul>\n<li><p>本地DNS服务器的IP地址根据用户的静态IP地址和动态IP地址设置而定，首先客户端向本地DNS服务器（LDNS）发出域名解析请求</p>\n</li>\n<li><p>本地DNS服务器先在域名解析记录缓存中查找，是否存在<a href=\"http://www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time\" target=\"_blank\" rel=\"noopener\">www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time</a> to live 的缩写），表示缓存时间，解析结束；若不存在，则向根域名服务器发出解析请求，使用<strong>递归查询</strong>的方法进行查询</p>\n</li>\n</ul>\n</li>\n<li><p>根域名服务器解析</p>\n<ul>\n<li><a href=\"http://www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做&quot;顶级域名&quot;，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做&quot;顶级域名&quot;，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求</a></li>\n</ul>\n</li>\n<li><p>顶级域名服务器解析</p>\n<ul>\n<li>顶级域名服务器<strong>.com</strong>对<a href=\"http://www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求</a></li>\n</ul>\n</li>\n<li><p>次级域名服务器解析</p>\n<ul>\n<li>次级域名服务器<strong>.qq.com</strong>对<a href=\"http://www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time\" target=\"_blank\" rel=\"noopener\">www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time</a> to live 的缩写），表示缓存时间，返回给本地DNS服务器，本地DNS服务器将该结果缓存，再将IP地址返回给客户端，客户端将该解析记录缓存，至此DNS解析结束</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"DNS优化\"><a href=\"/2018/02/27/Internet通信(一)/#DNS优化\" class=\"headerlink\" title=\"DNS优化\"></a>DNS优化</h3><p>由于DNS解析的过程十分复杂费时，所以DNS存在着多级缓存，提取DNS缓存的顺序大概如下：浏览器DNS缓存 – 系统DNS缓存 – 本地DNS服务器缓存 – 根域名服务器缓存 – 顶级域名服务器缓存 – 次级域名服务器缓存，解析记录的缓存时间由解析成功返回的TTL值（Time to live 的缩写）决定。</p>\n<h2 id=\"总结\"><a href=\"/2018/02/27/Internet通信(一)/#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，网络的基础知识和DNS域名解析讲完了，下节继续分析<strong>使用IP地址确定MAC地址</strong>和<strong>TCP链接</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>网络通信的过程十分复杂，本文只简单分析网络通信的过程以及相关的协议概述，从最常见的例子：”从浏览器输入url至呈现整个页面”。分析整个网络通信的过程，希望能对网络通信有个总体的认识，网络通信的整体认识对我们理解网络有非常大的帮助。由于文章过长，我将分为多个章节描述，如若描述有误，敬请指正。</p>\n<p>在分析网络通信之前，我们不妨好好思考一下这个问题？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"img/url.png\" alt=\"url\"></p>\n<p>这涉及到整个Internet通信的过程，涉及的范围非常大，我粗略归结为以下几个过程：</p>\n<ul>\n<li>DNS域名解析</li>\n<li>确定接收方MAC地址</li>\n<li>TCP链接</li>\n<li>HTTP请求</li>\n<li>浏览器渲染页面</li>\n</ul>\n<p>在分析该过程之前，我们先了解一些网络的基本知识以及相关协议。</p>\n<h2 id=\"网络模型\"><a href=\"#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h2><p> 网络可分为七层，四层或者五层模型，这里我们将网络分为五层，网络五层模型，如下图：<br><img src=\"img/internet.png\" alt=\"Internet\"><br>自上而下，分别为应用层，传输层，网络层，链接层和实体层（物理层），每层都有相关的协议和功能，并且都需要下一层的支持。他们的功能及依赖关系，我们可以大概了解，如图(点击放大)：<br><img src=\"img/detail.jpg\" alt=\"Internet Detail\"></p>\n<ol>\n<li><p>应用层HTTP协议的通信请求，规定应用程序的数据格式，基于传输层TCP协议的TCP连接</p>\n</li>\n<li><p>传输层的TCP连接，负责传输数据包，基于网络层的IP协议分配IP地址连通网络和链接层的MAC地址(网卡地址)确认接收主机</p>\n</li>\n<li><p>网络层的数据发送，基于链接层将实体层发出的电信号分组并解读，并通过ARP协议利用IP地址获取到MAC地址(网卡地址)</p>\n</li>\n<li><p>实体层（物理层），就是电脑间链接的介质，比如光纤，电缆等等，主要负责传送0和1的电信号</p>\n</li>\n</ol>\n<p>由此，我们不难得出Internet通信的前提是必须知道双方的<strong>IP地址</strong>和<strong>MAC地址(网卡地址，以太网的物理地址)</strong>，IP地址负责确定接收方的子网，MAC地址负责确定接收方的主机地址。</p>\n<hr>\n<h2 id=\"MAC地址\"><a href=\"#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h2><p>以太网规定，连入网络的所有设备，都必须要有一块网卡，因为数据包必须从一块网卡传送到另一块网卡，而网卡的地址，就是数据包发送和接收的地址，这就叫做<strong>MAC地址</strong>。</p>\n<p>每块网卡都拥有一个全世界唯一的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。如图：<br><img src=\"img/mac.jpg\" alt=\"MAC地址\"></p>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>Internet通信的前提是必须知道双方的<strong>IP地址</strong>和<strong>MAC地址</strong>，己方的<strong>MAC地址</strong>是必然知道的，但是<strong>IP地址</strong>是否知道却分为两种情况：</p>\n<ul>\n<li>静态IP地址</li>\n<li>动态IP地址</li>\n</ul>\n<h3 id=\"静态IP地址\"><a href=\"#静态IP地址\" class=\"headerlink\" title=\"静态IP地址\"></a>静态IP地址</h3><p>静态IP地址需要用户自己专门设置，如图<br><img src=\"img/staticIP.png\" alt=\"静态IP地址\"></p>\n<ul>\n<li><p><strong>IP地址</strong> – 互联网的协议地址</p>\n</li>\n<li><p><strong>子网掩码</strong> – 用于判断两个IP地址是否在同一个子网络中</p>\n</li>\n<li><p><strong>默认网关</strong> – 连接两个不同的子网络，转换协议</p>\n</li>\n<li><p><strong>DNS服务器</strong> – 用于DNS解析，将域名解析为IP地址</p>\n</li>\n</ul>\n<p>以上的四个参数缺一不可，使用手动设置的参数，每次计算机开机都可以使用相同的IP地址（如图使用的固定IP地址是：192.168.0.198）上网，所以这种情况被称为：”静态IP地址上网”，但是这样的设置是极少数人会做的，大多数人使用的都是”动态IP地址上网”。</p>\n<p>注：通用的公共DNS服务器有Google的8.8.8.8和国内的114.114.114.114，当然也可以使用运营商提供的DNS服务器。</p>\n<h3 id=\"动态IP地址\"><a href=\"#动态IP地址\" class=\"headerlink\" title=\"动态IP地址\"></a>动态IP地址</h3><p>动态IP地址，是每台计算机默认采用的上网方式，不需要用户手动设置，每次开机会自动分配一个IP地址，如图<br><img src=\"img/dynamicIP.png\" alt=\"动态IP地址\"><br>动态分配IP地址，会使用到<strong>DHCP协议</strong>，该协议规定在每个子网络中都会一台计算机负责管理本网络的所有IP地址，该计算机叫做<strong>“DHCP服务器”</strong>，每台计算机开机时候都会向<strong>“DHCP服务器”</strong>发送一个<strong>“DHCP请求”</strong>数据包，申请IP地址和相关的网络参数（子网掩码，默认网关和DNS服务器等等）。但是问题来了。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DHCP服务器的MAC地址，IP地址和本机的IP地址都不知道，该如何通信？</span><br></pre></td></tr></table></figure></p>\n<p><strong>DHCP协议</strong>对<strong>“DHCP请求”</strong>的数据包做了特定的规定，发出方发送的DHCP数据包：</p>\n<ul>\n<li><p>发出方本机的MAC地址和本机未知的IP地址为0.0.0.0</p>\n</li>\n<li><p>由于接收方DHCP服务器的信息都不知道，所以接收方的MAC地址则填写为FF-FF-FF-FF-FF-FF，IP地址填写为255.255.255.255。</p>\n</li>\n</ul>\n<p>该数据包在以太网以广播的方式传输，在同一子网络的每台计算机都会接收到该数据包，并分析数据包的接收方IP地址是否与自己的IP地址相匹配，当DHCP服务器接收到该数据包，并分析到该数据包的发出方IP地址为0.0.0.0，接收方IP地址为255.255.255.255，则会确认该数据包是发送给自己的，接下来就会进行IP地址分配，再响应发送回去一个”DHCP响应”的数据包，新加入的计算机接收到该响应包，就可以确定了本机的IP地址，子网掩码，默认网关和DNS服务器等相关信息，然后就可以上网了。</p>\n<hr>\n<p>有了以上的基础知识，我们回到以下这个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在浏览器输入www.qq.com，点击Enter，至页面呈现，其中发生了什么？</span><br></pre></td></tr></table></figure></p>\n<p>呈现页面的数据必须通过网络来发送和接收数据，但Internet通信的前提是必须先知道双方的MAC地址和IP地址，本机的MAC地址是必然知道的，IP地址则可以使用静态和动态IP的方式确定，那么我们只需要确定对方的MAC地址和IP地址即可实现通信。</p>\n<p>我们在浏览器输入的是<strong><a href=\"http://www.qq.com\" target=\"_blank\" rel=\"noopener\">www.qq.com</a></strong>，这是一个域名，域名在互联网中是没有什么意思的，只是为了方便用户记忆理解，但是在互联网中每个域名都可以通过DNS域名解析，解析成一个或者多个IP地址，解析确定对方的IP地址后，可以通过IP地址找到对应的主机，并确认该主机的MAC地址，最后实现通信，首先我们分析DNS域名解析的过程。</p>\n<h2 id=\"DNS域名解析\"><a href=\"#DNS域名解析\" class=\"headerlink\" title=\"DNS域名解析\"></a>DNS域名解析</h2><p>DNS（Domain Name System 的缩写）域名解析的作用是将域名解析为IP地址，具体过程如图<br><img src=\"img/dns.png\" alt=\"dns\"></p>\n<ol>\n<li><p>本机DNS解析</p>\n<ul>\n<li><p>浏览器缓存中查找<a href=\"http://www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析\" target=\"_blank\" rel=\"noopener\">www.qq.com域名解析记录，若浏览器缓存中有www.qq.com域名解析记录，则域名解析完成，返回相应的IP地址，若无，则继续下一步解析</a></p>\n</li>\n<li><p>在本机操作系统的DNS缓存和host文件查找<a href=\"http://www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名解析记录；若有，则域名解析完成，返回相应的IP地址；若无，则向本地DNS服务器转发解析请求</a></p>\n</li>\n</ul>\n</li>\n<li><p>本地DNS服务器解析</p>\n<ul>\n<li><p>本地DNS服务器的IP地址根据用户的静态IP地址和动态IP地址设置而定，首先客户端向本地DNS服务器（LDNS）发出域名解析请求</p>\n</li>\n<li><p>本地DNS服务器先在域名解析记录缓存中查找，是否存在<a href=\"http://www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time\" target=\"_blank\" rel=\"noopener\">www.qq.com域名的解析记录，若存在，则将域名对应的IP地址，域名解析结束；若不存在,则在本地DNS服务器管理的域名内进行DNS解析，查找是否存在www.qq.com域名；若存在，返回IP地址和TTL值（Time</a> to live 的缩写），表示缓存时间，解析结束；若不存在，则向根域名服务器发出解析请求，使用<strong>递归查询</strong>的方法进行查询</p>\n</li>\n</ul>\n</li>\n<li><p>根域名服务器解析</p>\n<ul>\n<li><a href=\"http://www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做&quot;顶级域名&quot;，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名真正的全称域名是www.qq.com.root，简写为www.qq.com。因为，根域名.root对于所有域名都是一样的，所以平时是省略的。根域名的下一级，叫做&quot;顶级域名&quot;，例如www.qq.com域名的顶级域名为.com。全球一共有十三组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET。根域名服务器对www.qq.com域名进行解析查询，查找www.qq.com域名的顶级域名服务器**.com**的IP地址，并返回给本地DNS服务器，本地DNS服务器再向顶级域名服务器**.com**发出域名解析请求</a></li>\n</ul>\n</li>\n<li><p>顶级域名服务器解析</p>\n<ul>\n<li>顶级域名服务器<strong>.com</strong>对<a href=\"http://www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求\" target=\"_blank\" rel=\"noopener\">www.qq.com域名进行解析查询，查找www.qq.com域名的次级域名服务器**.qq.com**的IP地址,并返回给本地DNS服务器，本地DNS服务器再向次级域名服务器**.qq.com**发出域名解析请求</a></li>\n</ul>\n</li>\n<li><p>次级域名服务器解析</p>\n<ul>\n<li>次级域名服务器<strong>.qq.com</strong>对<a href=\"http://www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time\" target=\"_blank\" rel=\"noopener\">www.qq.com域名进行解析查询，查找www.qq.com域名的IP地址,并将该IP地址和和TTL值（Time</a> to live 的缩写），表示缓存时间，返回给本地DNS服务器，本地DNS服务器将该结果缓存，再将IP地址返回给客户端，客户端将该解析记录缓存，至此DNS解析结束</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"DNS优化\"><a href=\"#DNS优化\" class=\"headerlink\" title=\"DNS优化\"></a>DNS优化</h3><p>由于DNS解析的过程十分复杂费时，所以DNS存在着多级缓存，提取DNS缓存的顺序大概如下：浏览器DNS缓存 – 系统DNS缓存 – 本地DNS服务器缓存 – 根域名服务器缓存 – 顶级域名服务器缓存 – 次级域名服务器缓存，解析记录的缓存时间由解析成功返回的TTL值（Time to live 的缩写）决定。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，网络的基础知识和DNS域名解析讲完了，下节继续分析<strong>使用IP地址确定MAC地址</strong>和<strong>TCP链接</strong>。</p>\n"},{"title":"http cache","comments":1,"layout":"false","date":"2018-02-26T06:02:52.000Z","updated":"2018-02-26T06:02:52.000Z","description":"Http缓存机制及原理。","toc":true,"_content":"## http报文\nhttp报文是浏览器和服务器通信时发送及响应的数据块。浏览器向服务器请求数据，发送请求（request）报文；服务器响应浏览器请求，向浏览器返回数据，返回响应（response）报文。\nrequest报文和response报文信息主要分为两部分：\n1.http请求头（header）\n - cookie以及缓存的相关规则信息\n \n2.http请求主体（body）\n - http请求传输和响应返回的数据部分","source":"_drafts/http-cache.md","raw":"---\ntitle: http cache\ncomments: true\nlayout: false\ndate: 2018-02-26 14:02:52\nupdated: 2018-02-26 14:02:52\ndescription: Http缓存机制及原理。\ntoc: true\ntags:\n - http\n \n---\n## http报文\nhttp报文是浏览器和服务器通信时发送及响应的数据块。浏览器向服务器请求数据，发送请求（request）报文；服务器响应浏览器请求，向浏览器返回数据，返回响应（response）报文。\nrequest报文和response报文信息主要分为两部分：\n1.http请求头（header）\n - cookie以及缓存的相关规则信息\n \n2.http请求主体（body）\n - http请求传输和响应返回的数据部分","slug":"http-cache","published":0,"photos":[],"link":"","_id":"cjedzfwnn0002pkl15fbmxkq4","content":"<h2 id=\"http报文\"><a href=\"#http报文\" class=\"headerlink\" title=\"http报文\"></a>http报文</h2><p>http报文是浏览器和服务器通信时发送及响应的数据块。浏览器向服务器请求数据，发送请求（request）报文；服务器响应浏览器请求，向浏览器返回数据，返回响应（response）报文。<br>request报文和response报文信息主要分为两部分：<br>1.http请求头（header）</p>\n<ul>\n<li>cookie以及缓存的相关规则信息</li>\n</ul>\n<p>2.http请求主体（body）</p>\n<ul>\n<li>http请求传输和响应返回的数据部分</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"http报文\"><a href=\"#http报文\" class=\"headerlink\" title=\"http报文\"></a>http报文</h2><p>http报文是浏览器和服务器通信时发送及响应的数据块。浏览器向服务器请求数据，发送请求（request）报文；服务器响应浏览器请求，向浏览器返回数据，返回响应（response）报文。<br>request报文和response报文信息主要分为两部分：<br>1.http请求头（header）</p>\n<ul>\n<li>cookie以及缓存的相关规则信息</li>\n</ul>\n<p>2.http请求主体（body）</p>\n<ul>\n<li>http请求传输和响应返回的数据部分</li>\n</ul>\n"},{"title":"vue-cli构建Vue项目结构分析","comments":1,"date":"2018-02-10T06:15:15.000Z","updated":"2018-02-10T06:15:15.000Z","toc":true,"description":"使用vue-cli脚手架可以快速构建vue项目，本文主要分析vue-cli构建的项目结构。","_content":"## 构建项目\n使用vue-cli脚手架搭建vue项目的具体步骤如下：\n```\nnpm install -g vue-cli\ncd E:(跳转到项目目录)\nvue init webpack vueproject (vueproject 为项目目录名称，可行更改)\ncd vueproject\nnpm install\nnpm run dev\n```\n\n##  项目结构分析\n![项目结构](img/project.png)\n\n##  package.json\n\n抽取package.json文件重要部分分析\n\n>scripts字段\n\n```\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\"\n}\n```\n项目开发周期主要执行的两个任务分别是开发环境``npm run dev``和打包任务``npm run build``,script字段是用来指定npm相关命令的缩写的,即相当于在node环境下执行build/dev-server.js和node build/build.js文件。\n\n-------------------------------------------------------------\n\n>dependencies和devDependencies字段\n\n```\n\"dependencies\": {\n    \"vue\": \"^2.3.3\",\n    \"vue-router\": \"^2.6.0\"\n},\n\"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-core\": \"^6.22.1\"\n}\n```\n\ndependencies字段指定了项目运行时所依赖的模块，devDependencies字段指定了项目开发时所依赖的模块。项目开发应使用命令管理package.json文件：\n```\nnpm i --save vue              \\\\自动写入package.json文件的dependencies字段；\nnpm i --save-dev babel-core \\\\自动写入package.json文件的devDependencies字段；\n```\n注：i为install的缩写\n\n------------------------------------------------------------\n\n>engine和browserslist字段\n\n```\n  \"engines\": {\n    \"node\": \">= 4.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n```\nengines字段表示项目运行所依赖的node以及npm版本号，browserslist表示项目的浏览器支持情况，具体详情可以查看[https://www.npmjs.com/package/browserslist](https://www.npmjs.com/package/browserslist)。\n\n##  build文件夹\n\n###  dev-server.js\n```\n// 检查 Node 和 npm 版本\nrequire('./check-versions')()\n//使用了 config/index.js\nvar config = require('../config')\n// 如果 Node 的环境无法判断当前是 dev / product 环境\nif (!process.env.NODE_ENV) {\n// 使用 config.dev.env.NODE_ENV 作为当前的环境\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n// 一个可以强制打开浏览器并跳转到指定 url 的插件\n//(可以调用默认软件打开网址、图片、文件等内容的插件,\n//这里用它来调用默认浏览器打开dev-server监听的端口，例如：localhost:8080)\nvar opn = require('opn')\n// 使用 NodeJS 自带的文件路径工具\nvar path = require('path')\n// 使用 express\nvar express = require('express')\n// 使用 webpack\nvar webpack = require('webpack')\n// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离\n// 在config/index.js中可以对proxyTable想进行配置\nvar proxyMiddleware = require('http-proxy-middleware')\n// 根据 Node 环境来引入相应的 webpack 配置\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\n// 如果没有指定运行端口，使用 config.dev.port 作为运行端口\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\n// 用于判断是否要自动打开浏览器的布尔变量，当配置文件中没有设置自动打开浏览器的时候其值为 false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\n// 定义 HTTP 代理表，代理到 API 服务器\n// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置\nvar proxyTable = config.dev.proxyTable\n// 使用 express 启动一个服务\nvar app = express()\n// 启动 webpack 进行编译\nvar compiler = webpack(webpackConfig)\n// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中\n//(webpack-dev-middleware使用compiler对象来对相应的文件进行编译和绑定\n// 编译绑定后将得到的产物存放在内存中而没有写进磁盘\n// 将这个中间件交给express使用之后即可访问这些编译后的产品文件)\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload用于实现热重载功能的中间件\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: () => {},\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\n// 当html-webpack-plugin提交之后通过热重载中间件发布重载动作使得页面重载\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\n// 将 proxyTable 中的请求配置挂在到启动的 express 服务上\n//Object.keys()返回对象的键名数组\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\n// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址，常用于SPA\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\n// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\n// 将热重载中间件(Hot-reload)挂在到express服务器上\napp.use(hotMiddleware)\n\n// serve pure static assets\n// 拼接 static 文件夹的静态资源路径\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\n// 为静态资源提供响应服务\napp.use(staticPath, express.static('./static'))\n// 应用的地址信息，例如：http://localhost:8080\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\n\n// webpack开发中间件合法（valid）之后输出提示语到控制台，表明服务器已启动\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n  _resolve()\n})\n//监听服务器端口\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n```\n\n该文件主要完成以下事情：\n\n1.检查node和npm的版本。\n\n2.引入相关插件和配置。\n\n3.创建express服务器和webpack编译器。\n\n4.配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）。\n\n5.挂载代理服务和中间件。\n\n6.配置静态资源。\n\n7.启动服务器监听特定端口（8080）。\n\n8.自动打开浏览器并打开特定网址（localhost:8080）。\n\n注：express服务器提供静态文件服务，不过它可以使用了http-proxy-middleware,一个http请求代理的中间件。前端开发过程中需要使用到后台的API的话，可以通过配置proxyTable来将相应的后台请求代理到专用的API服务器。\n\n------------------------------------------------------------\n\n###   build.js\n\n```\n// 检查 Node 和 npm 版本\nrequire('./check-versions')()\n//生产环境\nprocess.env.NODE_ENV = 'production'\n// 一个很好看的 loading 插件\nvar ora = require('ora')\nvar rm = require('rimraf')\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 用于在控制台输出带颜色字体的插件\nvar chalk = require('chalk')\n//加载webpack\nvar webpack = require('webpack')\n//加载config中index.js\nvar config = require('../config')\n//加载webpack.prod.conf\nvar webpackConfig = require('./webpack.prod.conf')\n\nvar spinner = ora('building for production...')\nspinner.start()// 开启loading动画\n// 拼接编译输出文件路径\nvar assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);\n// 删除这个文件夹 （递归删除）\nrm(assetsPath, err => {\n  if (err) throw err\n    //  开始 webpack 的编译\n  webpack(webpackConfig, function (err, stats) {\n    // 编译成功的回调函数\n    spinner.stop()\n    if (err) throw err\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n```\n\nbuild.js主要作用为：\n\n1.显示打包loading动画。\n\n2.删除并创建目标文件夹。\n\n3.webpack编译源文件。\n\n4.输出打包后的文件。\n\n注：webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。\n\n------------------------------------------------------------\n\n###   check-versions.js\n\n```\n// 用于在控制台输出带颜色字体的插件\nvar chalk = require('chalk')\n// 语义化版本检查插件\nvar semver = require('semver')\n// 引入package.json\nvar packageConfig = require('../package.json')\nvar shell = require('shelljs')\n// 开辟子进程执行指令cmd并返回结果\nfunction exec (cmd) {\n  return require('child_process').execSync(cmd).toString().trim()\n}\n// node和npm版本需求\nvar versionRequirements = [\n  {\n    name: 'node',\n    currentVersion: semver.clean(process.version),\n    versionRequirement: packageConfig.engines.node\n  },\n]\n\nif (shell.which('npm')) {\n  versionRequirements.push({\n    name: 'npm',\n    currentVersion: exec('npm --version'),\n    versionRequirement: packageConfig.engines.npm\n  })\n}\n\nmodule.exports = function () {\n  var warnings = []\n  // 依次判断版本是否符合要求\n  for (var i = 0; i < versionRequirements.length; i++) {\n    var mod = versionRequirements[i]\n    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + ': ' +\n        chalk.red(mod.currentVersion) + ' should be ' +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n  // 如果有警告则将其输出到控制台\n  if (warnings.length) {\n    console.log(chalk.yellow('To use this template, you must update following to modules:'))\n    for (var i = 0; i < warnings.length; i++) {\n      var warning = warnings[i]\n      console.log('  ' + warning)\n    }\n    process.exit(1)\n  }\n}\n```\n\n该文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。\n\n------------------------------------------------------------\n\n###   webpack.base.conf.js\n\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 引入一些小工具\nvar utils = require('./utils')\n// 引入 config/index.js\nvar config = require('../config')\nvar vueLoaderConfig = require('./vue-loader.conf')\n\n// 拼接我们的工作区路径为一个绝对路径\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nmodule.exports = {\n  // 配置webpack编译入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 配置webpack输出路径和命名规则\n  output: {\n    // webpack输出的目标文件夹路径（例如：/dist）\n    path: config.build.assetsRoot,\n    // webpack输出bundle文件命名格式\n    filename: '[name].js',\n    // 正式发布环境下webpack编译输出的发布路径\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    // 自动补全的扩展名\n    extensions: ['.js', '.vue', '.json'],\n    // 路径代理,创建路径别名，有了别名之后引用模块更方便\n    // 例如:import Vue from 'vue/dist/vue.common.js'可以写成 import Vue from 'vue'\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    }\n  },\n  // 配置不同类型模块的处理规则\n  module: {\n    rules: [\n      {\n        // 对src和test文件夹下的.js和.vue文件使用eslint-loader\n        test: /\\.(js|vue)$/,\n        loader: 'eslint-loader',\n        enforce: 'pre',\n        include: [resolve('src'), resolve('test')],\n        options: {\n          formatter: require('eslint-friendly-formatter')\n        }\n      },\n      {\n        // 对所有.vue文件使用vue-loader\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        // 对src和test文件夹下的.js文件使用babel-loader\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      {\n        // 对图片资源文件使用url-loader，query.name指明了输出的命名规则\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        // 对字体资源文件使用url-loader，query.name指明了输出的命名规则\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n}\n\n```\n\nwebpack.base.conf.js主要完成了下面这些事情：\n\n1.配置webpack编译入口\n\n2.配置webpack输出路径和命名规则\n\n3.配置模块resolve规则\n\n4.配置不同类型模块的处理规则\n\n注：这个配置里面只配置了.js、.vue、图片、字体等文件的处理规则，如果需要处理其他文件可以在module.rules里面配置。\n\n------------------------------------------------------------\n\n###   webpack.dev.conf.js\n\n```\n// 使用一些小工具\nvar utils = require('./utils')\n// 使用 webpack\nvar webpack = require('webpack')\n// 同样的使用了 config/index.js\nvar config = require('../config')\n// 使用 webpack 配置合并插件,可以合并数组和对象\nvar merge = require('webpack-merge')\n// 加载 webpack.base.conf，webpack基础配置\nvar baseWebpackConfig = require('./webpack.base.conf')\n// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中\n//(自动注入依赖文件（link/script）的webpack插件)\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n// 用于更友好地输出webpack的警告、错误等信息\nvar FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')\n\n// add hot-reload related code to entry chunks\n// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前，指定入口js文件\nObject.keys(baseWebpackConfig.entry).forEach(function (name) {\n  baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])\n})\n// 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并\nmodule.exports = merge(baseWebpackConfig, {\n  // 配置样式文件的处理规则，使用styleLoaders\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  // cheap-module-eval-source-map is faster for development\n   // 配置Source Maps。使用 #cheap-module-eval-source-map 模式作为开发工具，在开发中使用cheap-module-eval-source-map更快\n  devtool: '#cheap-module-eval-source-map',\n\n  // 配置webpack插件\n  plugins: [\n    // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串\n    new webpack.DefinePlugin({\n      'process.env': config.dev.env\n    }),\n    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage\n    // HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件\n    new webpack.HotModuleReplacementPlugin(),\n     // 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    // 将 index.html 作为入口，注入 html 代码后生成 index.html文件\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n    new FriendlyErrorsPlugin()\n  ]\n})\n\n```\n\n该文件主要完成以下事情：\n\n1.将hot-reload相关的代码添加到entry chunks。\n\n2.合并基础的webpack配置。\n\n3.使用styleLoaders。\n\n4.配置Source Maps。\n\n5.配置webpack插件。\n\n------------------------------------------------------------\n\n###   webpack.prod.conf.js\n\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 使用一些小工具\nvar utils = require('./utils')\n// 加载 webpack\nvar webpack = require('webpack')\n// 加载 confi.index.js\nvar config = require('../config')\n// 加载 webpack 配置合并工具\nvar merge = require('webpack-merge')\n// 加载 webpack.base.conf.js\nvar baseWebpackConfig = require('./webpack.base.conf')\n//使用copy-webpack-plugin插件\nvar CopyWebpackPlugin = require('copy-webpack-plugin')\n// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 用于从webpack生成的bundle中提取文本到特定文件中的插件\n// 可以抽取出css，js文件将其与webpack输出的bundle分离\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\n//使用js,css压缩插件\nvar OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n\n//判断当前环境是否为测试环境，如是加载测试环境配置文件，否则使用config.build.env\nvar env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : config.build.env\n// 合并 webpack.base.conf.js\nvar webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    // 使用的 loader\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true\n    })\n  },\n  // 是否使用 #source-map 开发工具\n  devtool: config.build.productionSourceMap ? '#source-map' : false,\n  output: {\n    // 编译输出目录\n    path: config.build.assetsRoot,\n    // 编译输出文件名\n    // 我们可以在 hash 后加 :6 决定使用几位 hash 值\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    // 没有指定输出名的文件输出的文件名\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  // 使用的插件\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n     // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    // 压缩 js (同样可以压缩 css)\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      },\n      sourceMap: true\n    }),\n    // extract css into its own file\n    // 将 css 文件分离出来\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css')\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: {\n        safe: true\n      }\n    }),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    // 输入输出的 .html 文件\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      // 是否注入 html\n      inject: true,\n      // 压缩的方式\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // split vendor js into its own file\n    // 没有指定输出文件名的文件输出的静态文件名\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: function (module, count) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    // 没有指定输出文件名的文件输出的静态文件名\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      chunks: ['vendor']\n    }),\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n// 开启 gzip 的情况下使用下方的配置,引入compression插件进行压缩\nif (config.build.productionGzip) {\n  var CompressionWebpackPlugin = require('compression-webpack-plugin')\n // 加载 compression-webpack-plugin 插件\n var reProductionGzipExtensions = '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$';\n  // 使用 compression-webpack-plugin 插件进行压缩\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(reProductionGzipExtensions),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n```\n\n该文件主要用处：\n\n1.合并基础的webpack.base.conf.js文件配置。\n\n2.使用styleLoaders。\n\n3.配置webpack的输出路径。\n\n4.配置webpack插件。\n\n5.gzip模式下的webpack插件配置。\n\n6.webpack-bundle分析。\n\n注：webpack插件里面使用了压缩代码以及抽离css文件等插件。\n\n------------------------------------------------------------\n\n##  config文件夹\n\n### index.js\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n\nmodule.exports = {\n  // production 环境\n  build: {\n    // 使用 config/prod.env.js 中定义的编译环境\n    env: require('./prod.env'),\n    // 编译输入的 index.html 文件\n    index: path.resolve(__dirname, '../dist/index.html'),\n    // 编译输出的静态资源根路径\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    // 编译输出的二级目录\n    assetsSubDirectory: 'static',\n    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名\n    assetsPublicPath: './',\n    // 是否开启 cssSourceMap\n    productionSourceMap: true,\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    // 是否开启 gzip,默认不开启\n    productionGzip: false,\n    // gzip模式下需要压缩的文件的扩展名\n    productionGzipExtensions: ['js', 'css'],\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  },\n  // dev 环境\n  dev: {\n    // 使用 config/dev.env.js 中定义的编译环境\n    env: require('./dev.env'),\n    // 运行测试页面的端口\n    port: 8087,\n    // 启动dev-server之后自动打开浏览器\n    autoOpenBrowser: true,\n    // 编译输出的二级目录\n    assetsSubDirectory: 'static',\n    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名\n    assetsPublicPath: '/',\n    // 需要 proxyTable 代理的接口（可跨域）\n    proxyTable: {},\n    //静态网址\n    /*proxyTable: {\n\n      // 下面的示例将代理请求/api/posts/1到http://jsonplaceholder.typicode.com/posts/1。\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    }*/\n    //changeOrigin:true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。\n    // 除了静态网址之外，您还可以使用glob模式来匹配URL，例如/api/**。有关详细信息，请参阅上下文匹配。\n    // 此外，您可以提供一个filter可以是自定义函数的选项，以确定请求是否应被代理：\n    /*proxyTable: {\n      '*': {\n            target: 'http://jsonplaceholder.typicode.com',\n            filter: function (pathname, req) {\n              return pathname.match('^/api') && req.method === 'GET'\n            }\n        }\n    }*/\n\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    // 是否开启 cssSourceMap\n    cssSourceMap: false\n  }\n}\n\n```\n\n该文件配置了开发和生产两种环境下的配置。\n\n------------------------------------------------------------\n\n## 总结\n\nwebpack的使用博大精深，仅仅了解到这里也只是入门。代码可以直接到我的github直接拉取，仓库地址[https://github.com/HeyingYe/vue-structural-analysis](https://github.com/HeyingYe/vue-structural-analysis)。","source":"_posts/vue-cli构建Vue项目结构分析.md","raw":"---\ntitle: vue-cli构建Vue项目结构分析\ncomments: true\ndate: 2018-02-10 14:15:15\nupdated: 2018-02-10 14:15:15\ntoc: true\ndescription: 使用vue-cli脚手架可以快速构建vue项目，本文主要分析vue-cli构建的项目结构。\ntags: \n - vue\n\n---\n## 构建项目\n使用vue-cli脚手架搭建vue项目的具体步骤如下：\n```\nnpm install -g vue-cli\ncd E:(跳转到项目目录)\nvue init webpack vueproject (vueproject 为项目目录名称，可行更改)\ncd vueproject\nnpm install\nnpm run dev\n```\n\n##  项目结构分析\n![项目结构](img/project.png)\n\n##  package.json\n\n抽取package.json文件重要部分分析\n\n>scripts字段\n\n```\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\"\n}\n```\n项目开发周期主要执行的两个任务分别是开发环境``npm run dev``和打包任务``npm run build``,script字段是用来指定npm相关命令的缩写的,即相当于在node环境下执行build/dev-server.js和node build/build.js文件。\n\n-------------------------------------------------------------\n\n>dependencies和devDependencies字段\n\n```\n\"dependencies\": {\n    \"vue\": \"^2.3.3\",\n    \"vue-router\": \"^2.6.0\"\n},\n\"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-core\": \"^6.22.1\"\n}\n```\n\ndependencies字段指定了项目运行时所依赖的模块，devDependencies字段指定了项目开发时所依赖的模块。项目开发应使用命令管理package.json文件：\n```\nnpm i --save vue              \\\\自动写入package.json文件的dependencies字段；\nnpm i --save-dev babel-core \\\\自动写入package.json文件的devDependencies字段；\n```\n注：i为install的缩写\n\n------------------------------------------------------------\n\n>engine和browserslist字段\n\n```\n  \"engines\": {\n    \"node\": \">= 4.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n```\nengines字段表示项目运行所依赖的node以及npm版本号，browserslist表示项目的浏览器支持情况，具体详情可以查看[https://www.npmjs.com/package/browserslist](https://www.npmjs.com/package/browserslist)。\n\n##  build文件夹\n\n###  dev-server.js\n```\n// 检查 Node 和 npm 版本\nrequire('./check-versions')()\n//使用了 config/index.js\nvar config = require('../config')\n// 如果 Node 的环境无法判断当前是 dev / product 环境\nif (!process.env.NODE_ENV) {\n// 使用 config.dev.env.NODE_ENV 作为当前的环境\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n// 一个可以强制打开浏览器并跳转到指定 url 的插件\n//(可以调用默认软件打开网址、图片、文件等内容的插件,\n//这里用它来调用默认浏览器打开dev-server监听的端口，例如：localhost:8080)\nvar opn = require('opn')\n// 使用 NodeJS 自带的文件路径工具\nvar path = require('path')\n// 使用 express\nvar express = require('express')\n// 使用 webpack\nvar webpack = require('webpack')\n// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离\n// 在config/index.js中可以对proxyTable想进行配置\nvar proxyMiddleware = require('http-proxy-middleware')\n// 根据 Node 环境来引入相应的 webpack 配置\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\n// 如果没有指定运行端口，使用 config.dev.port 作为运行端口\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\n// 用于判断是否要自动打开浏览器的布尔变量，当配置文件中没有设置自动打开浏览器的时候其值为 false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\n// 定义 HTTP 代理表，代理到 API 服务器\n// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置\nvar proxyTable = config.dev.proxyTable\n// 使用 express 启动一个服务\nvar app = express()\n// 启动 webpack 进行编译\nvar compiler = webpack(webpackConfig)\n// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中\n//(webpack-dev-middleware使用compiler对象来对相应的文件进行编译和绑定\n// 编译绑定后将得到的产物存放在内存中而没有写进磁盘\n// 将这个中间件交给express使用之后即可访问这些编译后的产品文件)\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload用于实现热重载功能的中间件\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: () => {},\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\n// 当html-webpack-plugin提交之后通过热重载中间件发布重载动作使得页面重载\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\n// 将 proxyTable 中的请求配置挂在到启动的 express 服务上\n//Object.keys()返回对象的键名数组\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\n// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址，常用于SPA\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\n// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\n// 将热重载中间件(Hot-reload)挂在到express服务器上\napp.use(hotMiddleware)\n\n// serve pure static assets\n// 拼接 static 文件夹的静态资源路径\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\n// 为静态资源提供响应服务\napp.use(staticPath, express.static('./static'))\n// 应用的地址信息，例如：http://localhost:8080\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\n\n// webpack开发中间件合法（valid）之后输出提示语到控制台，表明服务器已启动\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n  _resolve()\n})\n//监听服务器端口\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n```\n\n该文件主要完成以下事情：\n\n1.检查node和npm的版本。\n\n2.引入相关插件和配置。\n\n3.创建express服务器和webpack编译器。\n\n4.配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）。\n\n5.挂载代理服务和中间件。\n\n6.配置静态资源。\n\n7.启动服务器监听特定端口（8080）。\n\n8.自动打开浏览器并打开特定网址（localhost:8080）。\n\n注：express服务器提供静态文件服务，不过它可以使用了http-proxy-middleware,一个http请求代理的中间件。前端开发过程中需要使用到后台的API的话，可以通过配置proxyTable来将相应的后台请求代理到专用的API服务器。\n\n------------------------------------------------------------\n\n###   build.js\n\n```\n// 检查 Node 和 npm 版本\nrequire('./check-versions')()\n//生产环境\nprocess.env.NODE_ENV = 'production'\n// 一个很好看的 loading 插件\nvar ora = require('ora')\nvar rm = require('rimraf')\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 用于在控制台输出带颜色字体的插件\nvar chalk = require('chalk')\n//加载webpack\nvar webpack = require('webpack')\n//加载config中index.js\nvar config = require('../config')\n//加载webpack.prod.conf\nvar webpackConfig = require('./webpack.prod.conf')\n\nvar spinner = ora('building for production...')\nspinner.start()// 开启loading动画\n// 拼接编译输出文件路径\nvar assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);\n// 删除这个文件夹 （递归删除）\nrm(assetsPath, err => {\n  if (err) throw err\n    //  开始 webpack 的编译\n  webpack(webpackConfig, function (err, stats) {\n    // 编译成功的回调函数\n    spinner.stop()\n    if (err) throw err\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n```\n\nbuild.js主要作用为：\n\n1.显示打包loading动画。\n\n2.删除并创建目标文件夹。\n\n3.webpack编译源文件。\n\n4.输出打包后的文件。\n\n注：webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。\n\n------------------------------------------------------------\n\n###   check-versions.js\n\n```\n// 用于在控制台输出带颜色字体的插件\nvar chalk = require('chalk')\n// 语义化版本检查插件\nvar semver = require('semver')\n// 引入package.json\nvar packageConfig = require('../package.json')\nvar shell = require('shelljs')\n// 开辟子进程执行指令cmd并返回结果\nfunction exec (cmd) {\n  return require('child_process').execSync(cmd).toString().trim()\n}\n// node和npm版本需求\nvar versionRequirements = [\n  {\n    name: 'node',\n    currentVersion: semver.clean(process.version),\n    versionRequirement: packageConfig.engines.node\n  },\n]\n\nif (shell.which('npm')) {\n  versionRequirements.push({\n    name: 'npm',\n    currentVersion: exec('npm --version'),\n    versionRequirement: packageConfig.engines.npm\n  })\n}\n\nmodule.exports = function () {\n  var warnings = []\n  // 依次判断版本是否符合要求\n  for (var i = 0; i < versionRequirements.length; i++) {\n    var mod = versionRequirements[i]\n    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + ': ' +\n        chalk.red(mod.currentVersion) + ' should be ' +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n  // 如果有警告则将其输出到控制台\n  if (warnings.length) {\n    console.log(chalk.yellow('To use this template, you must update following to modules:'))\n    for (var i = 0; i < warnings.length; i++) {\n      var warning = warnings[i]\n      console.log('  ' + warning)\n    }\n    process.exit(1)\n  }\n}\n```\n\n该文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。\n\n------------------------------------------------------------\n\n###   webpack.base.conf.js\n\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 引入一些小工具\nvar utils = require('./utils')\n// 引入 config/index.js\nvar config = require('../config')\nvar vueLoaderConfig = require('./vue-loader.conf')\n\n// 拼接我们的工作区路径为一个绝对路径\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nmodule.exports = {\n  // 配置webpack编译入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 配置webpack输出路径和命名规则\n  output: {\n    // webpack输出的目标文件夹路径（例如：/dist）\n    path: config.build.assetsRoot,\n    // webpack输出bundle文件命名格式\n    filename: '[name].js',\n    // 正式发布环境下webpack编译输出的发布路径\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    // 自动补全的扩展名\n    extensions: ['.js', '.vue', '.json'],\n    // 路径代理,创建路径别名，有了别名之后引用模块更方便\n    // 例如:import Vue from 'vue/dist/vue.common.js'可以写成 import Vue from 'vue'\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    }\n  },\n  // 配置不同类型模块的处理规则\n  module: {\n    rules: [\n      {\n        // 对src和test文件夹下的.js和.vue文件使用eslint-loader\n        test: /\\.(js|vue)$/,\n        loader: 'eslint-loader',\n        enforce: 'pre',\n        include: [resolve('src'), resolve('test')],\n        options: {\n          formatter: require('eslint-friendly-formatter')\n        }\n      },\n      {\n        // 对所有.vue文件使用vue-loader\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        // 对src和test文件夹下的.js文件使用babel-loader\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      {\n        // 对图片资源文件使用url-loader，query.name指明了输出的命名规则\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        // 对字体资源文件使用url-loader，query.name指明了输出的命名规则\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n}\n\n```\n\nwebpack.base.conf.js主要完成了下面这些事情：\n\n1.配置webpack编译入口\n\n2.配置webpack输出路径和命名规则\n\n3.配置模块resolve规则\n\n4.配置不同类型模块的处理规则\n\n注：这个配置里面只配置了.js、.vue、图片、字体等文件的处理规则，如果需要处理其他文件可以在module.rules里面配置。\n\n------------------------------------------------------------\n\n###   webpack.dev.conf.js\n\n```\n// 使用一些小工具\nvar utils = require('./utils')\n// 使用 webpack\nvar webpack = require('webpack')\n// 同样的使用了 config/index.js\nvar config = require('../config')\n// 使用 webpack 配置合并插件,可以合并数组和对象\nvar merge = require('webpack-merge')\n// 加载 webpack.base.conf，webpack基础配置\nvar baseWebpackConfig = require('./webpack.base.conf')\n// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中\n//(自动注入依赖文件（link/script）的webpack插件)\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n// 用于更友好地输出webpack的警告、错误等信息\nvar FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')\n\n// add hot-reload related code to entry chunks\n// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前，指定入口js文件\nObject.keys(baseWebpackConfig.entry).forEach(function (name) {\n  baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])\n})\n// 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并\nmodule.exports = merge(baseWebpackConfig, {\n  // 配置样式文件的处理规则，使用styleLoaders\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  // cheap-module-eval-source-map is faster for development\n   // 配置Source Maps。使用 #cheap-module-eval-source-map 模式作为开发工具，在开发中使用cheap-module-eval-source-map更快\n  devtool: '#cheap-module-eval-source-map',\n\n  // 配置webpack插件\n  plugins: [\n    // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串\n    new webpack.DefinePlugin({\n      'process.env': config.dev.env\n    }),\n    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage\n    // HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件\n    new webpack.HotModuleReplacementPlugin(),\n     // 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    // 将 index.html 作为入口，注入 html 代码后生成 index.html文件\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n    new FriendlyErrorsPlugin()\n  ]\n})\n\n```\n\n该文件主要完成以下事情：\n\n1.将hot-reload相关的代码添加到entry chunks。\n\n2.合并基础的webpack配置。\n\n3.使用styleLoaders。\n\n4.配置Source Maps。\n\n5.配置webpack插件。\n\n------------------------------------------------------------\n\n###   webpack.prod.conf.js\n\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n// 使用一些小工具\nvar utils = require('./utils')\n// 加载 webpack\nvar webpack = require('webpack')\n// 加载 confi.index.js\nvar config = require('../config')\n// 加载 webpack 配置合并工具\nvar merge = require('webpack-merge')\n// 加载 webpack.base.conf.js\nvar baseWebpackConfig = require('./webpack.base.conf')\n//使用copy-webpack-plugin插件\nvar CopyWebpackPlugin = require('copy-webpack-plugin')\n// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 用于从webpack生成的bundle中提取文本到特定文件中的插件\n// 可以抽取出css，js文件将其与webpack输出的bundle分离\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\n//使用js,css压缩插件\nvar OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n\n//判断当前环境是否为测试环境，如是加载测试环境配置文件，否则使用config.build.env\nvar env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : config.build.env\n// 合并 webpack.base.conf.js\nvar webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    // 使用的 loader\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true\n    })\n  },\n  // 是否使用 #source-map 开发工具\n  devtool: config.build.productionSourceMap ? '#source-map' : false,\n  output: {\n    // 编译输出目录\n    path: config.build.assetsRoot,\n    // 编译输出文件名\n    // 我们可以在 hash 后加 :6 决定使用几位 hash 值\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    // 没有指定输出名的文件输出的文件名\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  // 使用的插件\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n     // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    // 压缩 js (同样可以压缩 css)\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      },\n      sourceMap: true\n    }),\n    // extract css into its own file\n    // 将 css 文件分离出来\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css')\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: {\n        safe: true\n      }\n    }),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    // 输入输出的 .html 文件\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      // 是否注入 html\n      inject: true,\n      // 压缩的方式\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // split vendor js into its own file\n    // 没有指定输出文件名的文件输出的静态文件名\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: function (module, count) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    // 没有指定输出文件名的文件输出的静态文件名\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      chunks: ['vendor']\n    }),\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n// 开启 gzip 的情况下使用下方的配置,引入compression插件进行压缩\nif (config.build.productionGzip) {\n  var CompressionWebpackPlugin = require('compression-webpack-plugin')\n // 加载 compression-webpack-plugin 插件\n var reProductionGzipExtensions = '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$';\n  // 使用 compression-webpack-plugin 插件进行压缩\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(reProductionGzipExtensions),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n```\n\n该文件主要用处：\n\n1.合并基础的webpack.base.conf.js文件配置。\n\n2.使用styleLoaders。\n\n3.配置webpack的输出路径。\n\n4.配置webpack插件。\n\n5.gzip模式下的webpack插件配置。\n\n6.webpack-bundle分析。\n\n注：webpack插件里面使用了压缩代码以及抽离css文件等插件。\n\n------------------------------------------------------------\n\n##  config文件夹\n\n### index.js\n```\n// 使用 NodeJS 自带的文件路径插件\nvar path = require('path')\n\nmodule.exports = {\n  // production 环境\n  build: {\n    // 使用 config/prod.env.js 中定义的编译环境\n    env: require('./prod.env'),\n    // 编译输入的 index.html 文件\n    index: path.resolve(__dirname, '../dist/index.html'),\n    // 编译输出的静态资源根路径\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    // 编译输出的二级目录\n    assetsSubDirectory: 'static',\n    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名\n    assetsPublicPath: './',\n    // 是否开启 cssSourceMap\n    productionSourceMap: true,\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    // 是否开启 gzip,默认不开启\n    productionGzip: false,\n    // gzip模式下需要压缩的文件的扩展名\n    productionGzipExtensions: ['js', 'css'],\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  },\n  // dev 环境\n  dev: {\n    // 使用 config/dev.env.js 中定义的编译环境\n    env: require('./dev.env'),\n    // 运行测试页面的端口\n    port: 8087,\n    // 启动dev-server之后自动打开浏览器\n    autoOpenBrowser: true,\n    // 编译输出的二级目录\n    assetsSubDirectory: 'static',\n    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名\n    assetsPublicPath: '/',\n    // 需要 proxyTable 代理的接口（可跨域）\n    proxyTable: {},\n    //静态网址\n    /*proxyTable: {\n\n      // 下面的示例将代理请求/api/posts/1到http://jsonplaceholder.typicode.com/posts/1。\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    }*/\n    //changeOrigin:true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。\n    // 除了静态网址之外，您还可以使用glob模式来匹配URL，例如/api/**。有关详细信息，请参阅上下文匹配。\n    // 此外，您可以提供一个filter可以是自定义函数的选项，以确定请求是否应被代理：\n    /*proxyTable: {\n      '*': {\n            target: 'http://jsonplaceholder.typicode.com',\n            filter: function (pathname, req) {\n              return pathname.match('^/api') && req.method === 'GET'\n            }\n        }\n    }*/\n\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    // 是否开启 cssSourceMap\n    cssSourceMap: false\n  }\n}\n\n```\n\n该文件配置了开发和生产两种环境下的配置。\n\n------------------------------------------------------------\n\n## 总结\n\nwebpack的使用博大精深，仅仅了解到这里也只是入门。代码可以直接到我的github直接拉取，仓库地址[https://github.com/HeyingYe/vue-structural-analysis](https://github.com/HeyingYe/vue-structural-analysis)。","slug":"vue-cli构建Vue项目结构分析","published":1,"layout":"post","photos":[],"link":"","_id":"cjedzfwnu0004pkl1ya3qtttz","content":"<h2 id=\"构建项目\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>使用vue-cli脚手架搭建vue项目的具体步骤如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">cd E:(跳转到项目目录)</span><br><span class=\"line\">vue init webpack vueproject (vueproject 为项目目录名称，可行更改)</span><br><span class=\"line\">cd vueproject</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"项目结构分析\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#项目结构分析\" class=\"headerlink\" title=\"项目结构分析\"></a>项目结构分析</h2><p><img src=\"/2018/02/10/vue-cli构建Vue项目结构分析/img/project.png\" alt=\"项目结构\"></p>\n<h2 id=\"package-json\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>抽取package.json文件重要部分分析</p>\n<blockquote>\n<p>scripts字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;node build/build.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目开发周期主要执行的两个任务分别是开发环境<code>npm run dev</code>和打包任务<code>npm run build</code>,script字段是用来指定npm相关命令的缩写的,即相当于在node环境下执行build/dev-server.js和node build/build.js文件。</p>\n<hr>\n<blockquote>\n<p>dependencies和devDependencies字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;vue&quot;: &quot;^2.3.3&quot;,</span><br><span class=\"line\">    &quot;vue-router&quot;: &quot;^2.6.0&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;,</span><br><span class=\"line\">    &quot;babel-core&quot;: &quot;^6.22.1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dependencies字段指定了项目运行时所依赖的模块，devDependencies字段指定了项目开发时所依赖的模块。项目开发应使用命令管理package.json文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save vue              \\\\自动写入package.json文件的dependencies字段；</span><br><span class=\"line\">npm i --save-dev babel-core \\\\自动写入package.json文件的devDependencies字段；</span><br></pre></td></tr></table></figure></p>\n<p>注：i为install的缩写</p>\n<hr>\n<blockquote>\n<p>engine和browserslist字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;engines&quot;: &#123;</span><br><span class=\"line\">  &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,</span><br><span class=\"line\">  &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;browserslist&quot;: [</span><br><span class=\"line\">  &quot;&gt; 1%&quot;,</span><br><span class=\"line\">  &quot;last 2 versions&quot;,</span><br><span class=\"line\">  &quot;not ie &lt;= 8&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>engines字段表示项目运行所依赖的node以及npm版本号，browserslist表示项目的浏览器支持情况，具体详情可以查看<a href=\"https://www.npmjs.com/package/browserslist\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/browserslist</a>。</p>\n<h2 id=\"build文件夹\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#build文件夹\" class=\"headerlink\" title=\"build文件夹\"></a>build文件夹</h2><h3 id=\"dev-server-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#dev-server-js\" class=\"headerlink\" title=\"dev-server.js\"></a>dev-server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查 Node 和 npm 版本</span><br><span class=\"line\">require(&apos;./check-versions&apos;)()</span><br><span class=\"line\">//使用了 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 如果 Node 的环境无法判断当前是 dev / product 环境</span><br><span class=\"line\">if (!process.env.NODE_ENV) &#123;</span><br><span class=\"line\">// 使用 config.dev.env.NODE_ENV 作为当前的环境</span><br><span class=\"line\">  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span><br><span class=\"line\">//(可以调用默认软件打开网址、图片、文件等内容的插件,</span><br><span class=\"line\">//这里用它来调用默认浏览器打开dev-server监听的端口，例如：localhost:8080)</span><br><span class=\"line\">var opn = require(&apos;opn&apos;)</span><br><span class=\"line\">// 使用 NodeJS 自带的文件路径工具</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 使用 express</span><br><span class=\"line\">var express = require(&apos;express&apos;)</span><br><span class=\"line\">// 使用 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离</span><br><span class=\"line\">// 在config/index.js中可以对proxyTable想进行配置</span><br><span class=\"line\">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</span><br><span class=\"line\">// 根据 Node 环境来引入相应的 webpack 配置</span><br><span class=\"line\">var webpackConfig = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">  ? require(&apos;./webpack.prod.conf&apos;)</span><br><span class=\"line\">  : require(&apos;./webpack.dev.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// default port where dev server listens for incoming traffic</span><br><span class=\"line\">// 如果没有指定运行端口，使用 config.dev.port 作为运行端口</span><br><span class=\"line\">var port = process.env.PORT || config.dev.port</span><br><span class=\"line\">// automatically open browser, if not set will be false</span><br><span class=\"line\">// 用于判断是否要自动打开浏览器的布尔变量，当配置文件中没有设置自动打开浏览器的时候其值为 false</span><br><span class=\"line\">var autoOpenBrowser = !!config.dev.autoOpenBrowser</span><br><span class=\"line\"></span><br><span class=\"line\">// Define HTTP proxies to your custom API backend</span><br><span class=\"line\">// https://github.com/chimurai/http-proxy-middleware</span><br><span class=\"line\">// 定义 HTTP 代理表，代理到 API 服务器</span><br><span class=\"line\">// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置</span><br><span class=\"line\">var proxyTable = config.dev.proxyTable</span><br><span class=\"line\">// 使用 express 启动一个服务</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\">// 启动 webpack 进行编译</span><br><span class=\"line\">var compiler = webpack(webpackConfig)</span><br><span class=\"line\">// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中</span><br><span class=\"line\">//(webpack-dev-middleware使用compiler对象来对相应的文件进行编译和绑定</span><br><span class=\"line\">// 编译绑定后将得到的产物存放在内存中而没有写进磁盘</span><br><span class=\"line\">// 将这个中间件交给express使用之后即可访问这些编译后的产品文件)</span><br><span class=\"line\">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</span><br><span class=\"line\">  publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">  quiet: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload用于实现热重载功能的中间件</span><br><span class=\"line\">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler, &#123;</span><br><span class=\"line\">  log: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  heartbeat: 2000</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// force page reload when html-webpack-plugin template changes</span><br><span class=\"line\">// 当html-webpack-plugin提交之后通过热重载中间件发布重载动作使得页面重载</span><br><span class=\"line\">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</span><br><span class=\"line\">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</span><br><span class=\"line\">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// proxy api requests</span><br><span class=\"line\">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span><br><span class=\"line\">//Object.keys()返回对象的键名数组</span><br><span class=\"line\">Object.keys(proxyTable).forEach(function (context) &#123;</span><br><span class=\"line\">  var options = proxyTable[context]</span><br><span class=\"line\">  if (typeof options === &apos;string&apos;) &#123;</span><br><span class=\"line\">    options = &#123; target: options &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  app.use(proxyMiddleware(options.filter || context, options))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// handle fallback for HTML5 history API</span><br><span class=\"line\">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址，常用于SPA</span><br><span class=\"line\">app.use(require(&apos;connect-history-api-fallback&apos;)())</span><br><span class=\"line\"></span><br><span class=\"line\">// serve webpack bundle output</span><br><span class=\"line\">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">// enable hot-reload and state-preserving</span><br><span class=\"line\">// compilation error display</span><br><span class=\"line\">// 将热重载中间件(Hot-reload)挂在到express服务器上</span><br><span class=\"line\">app.use(hotMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">// serve pure static assets</span><br><span class=\"line\">// 拼接 static 文件夹的静态资源路径</span><br><span class=\"line\">var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class=\"line\">// 为静态资源提供响应服务</span><br><span class=\"line\">app.use(staticPath, express.static(&apos;./static&apos;))</span><br><span class=\"line\">// 应用的地址信息，例如：http://localhost:8080</span><br><span class=\"line\">var uri = &apos;http://localhost:&apos; + port</span><br><span class=\"line\"></span><br><span class=\"line\">var _resolve</span><br><span class=\"line\">var readyPromise = new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">  _resolve = resolve</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;&gt; Starting dev server...&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// webpack开发中间件合法（valid）之后输出提示语到控制台，表明服务器已启动</span><br><span class=\"line\">devMiddleware.waitUntilValid(() =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;&gt; Listening at &apos; + uri + &apos;\\n&apos;)</span><br><span class=\"line\">  // when env is testing, don&apos;t need open it</span><br><span class=\"line\">  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span><br><span class=\"line\">  if (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== &apos;testing&apos;) &#123;</span><br><span class=\"line\">    opn(uri)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _resolve()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//监听服务器端口</span><br><span class=\"line\">var server = app.listen(port)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ready: readyPromise,</span><br><span class=\"line\">  close: () =&gt; &#123;</span><br><span class=\"line\">    server.close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件主要完成以下事情：</p>\n<p>1.检查node和npm的版本。</p>\n<p>2.引入相关插件和配置。</p>\n<p>3.创建express服务器和webpack编译器。</p>\n<p>4.配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）。</p>\n<p>5.挂载代理服务和中间件。</p>\n<p>6.配置静态资源。</p>\n<p>7.启动服务器监听特定端口（8080）。</p>\n<p>8.自动打开浏览器并打开特定网址（localhost:8080）。</p>\n<p>注：express服务器提供静态文件服务，不过它可以使用了http-proxy-middleware,一个http请求代理的中间件。前端开发过程中需要使用到后台的API的话，可以通过配置proxyTable来将相应的后台请求代理到专用的API服务器。</p>\n<hr>\n<h3 id=\"build-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查 Node 和 npm 版本</span><br><span class=\"line\">require(&apos;./check-versions&apos;)()</span><br><span class=\"line\">//生产环境</span><br><span class=\"line\">process.env.NODE_ENV = &apos;production&apos;</span><br><span class=\"line\">// 一个很好看的 loading 插件</span><br><span class=\"line\">var ora = require(&apos;ora&apos;)</span><br><span class=\"line\">var rm = require(&apos;rimraf&apos;)</span><br><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 用于在控制台输出带颜色字体的插件</span><br><span class=\"line\">var chalk = require(&apos;chalk&apos;)</span><br><span class=\"line\">//加载webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">//加载config中index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">//加载webpack.prod.conf</span><br><span class=\"line\">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var spinner = ora(&apos;building for production...&apos;)</span><br><span class=\"line\">spinner.start()// 开启loading动画</span><br><span class=\"line\">// 拼接编译输出文件路径</span><br><span class=\"line\">var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);</span><br><span class=\"line\">// 删除这个文件夹 （递归删除）</span><br><span class=\"line\">rm(assetsPath, err =&gt; &#123;</span><br><span class=\"line\">  if (err) throw err</span><br><span class=\"line\">    //  开始 webpack 的编译</span><br><span class=\"line\">  webpack(webpackConfig, function (err, stats) &#123;</span><br><span class=\"line\">    // 编译成功的回调函数</span><br><span class=\"line\">    spinner.stop()</span><br><span class=\"line\">    if (err) throw err</span><br><span class=\"line\">    process.stdout.write(stats.toString(&#123;</span><br><span class=\"line\">      colors: true,</span><br><span class=\"line\">      modules: false,</span><br><span class=\"line\">      children: false,</span><br><span class=\"line\">      chunks: false,</span><br><span class=\"line\">      chunkModules: false</span><br><span class=\"line\">    &#125;) + &apos;\\n\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(chalk.cyan(&apos;  Build complete.\\n&apos;))</span><br><span class=\"line\">    console.log(chalk.yellow(</span><br><span class=\"line\">      &apos;  Tip: built files are meant to be served over an HTTP server.\\n&apos; +</span><br><span class=\"line\">      &apos;  Opening index.html over file:// won\\&apos;t work.\\n&apos;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>build.js主要作用为：</p>\n<p>1.显示打包loading动画。</p>\n<p>2.删除并创建目标文件夹。</p>\n<p>3.webpack编译源文件。</p>\n<p>4.输出打包后的文件。</p>\n<p>注：webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。</p>\n<hr>\n<h3 id=\"check-versions-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#check-versions-js\" class=\"headerlink\" title=\"check-versions.js\"></a>check-versions.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用于在控制台输出带颜色字体的插件</span><br><span class=\"line\">var chalk = require(&apos;chalk&apos;)</span><br><span class=\"line\">// 语义化版本检查插件</span><br><span class=\"line\">var semver = require(&apos;semver&apos;)</span><br><span class=\"line\">// 引入package.json</span><br><span class=\"line\">var packageConfig = require(&apos;../package.json&apos;)</span><br><span class=\"line\">var shell = require(&apos;shelljs&apos;)</span><br><span class=\"line\">// 开辟子进程执行指令cmd并返回结果</span><br><span class=\"line\">function exec (cmd) &#123;</span><br><span class=\"line\">  return require(&apos;child_process&apos;).execSync(cmd).toString().trim()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// node和npm版本需求</span><br><span class=\"line\">var versionRequirements = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &apos;node&apos;,</span><br><span class=\"line\">    currentVersion: semver.clean(process.version),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.node</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">if (shell.which(&apos;npm&apos;)) &#123;</span><br><span class=\"line\">  versionRequirements.push(&#123;</span><br><span class=\"line\">    name: &apos;npm&apos;,</span><br><span class=\"line\">    currentVersion: exec(&apos;npm --version&apos;),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.npm</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function () &#123;</span><br><span class=\"line\">  var warnings = []</span><br><span class=\"line\">  // 依次判断版本是否符合要求</span><br><span class=\"line\">  for (var i = 0; i &lt; versionRequirements.length; i++) &#123;</span><br><span class=\"line\">    var mod = versionRequirements[i]</span><br><span class=\"line\">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class=\"line\">      warnings.push(mod.name + &apos;: &apos; +</span><br><span class=\"line\">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</span><br><span class=\"line\">        chalk.green(mod.versionRequirement)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 如果有警告则将其输出到控制台</span><br><span class=\"line\">  if (warnings.length) &#123;</span><br><span class=\"line\">    console.log(chalk.yellow(&apos;To use this template, you must update following to modules:&apos;))</span><br><span class=\"line\">    for (var i = 0; i &lt; warnings.length; i++) &#123;</span><br><span class=\"line\">      var warning = warnings[i]</span><br><span class=\"line\">      console.log(&apos;  &apos; + warning)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。</p>\n<hr>\n<h3 id=\"webpack-base-conf-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 引入一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 引入 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">var vueLoaderConfig = require(&apos;./vue-loader.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 拼接我们的工作区路径为一个绝对路径</span><br><span class=\"line\">function resolve (dir) &#123;</span><br><span class=\"line\">  return path.join(__dirname, &apos;..&apos;, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 配置webpack编译入口</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: &apos;./src/main.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置webpack输出路径和命名规则</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    // webpack输出的目标文件夹路径（例如：/dist）</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    // webpack输出bundle文件命名格式</span><br><span class=\"line\">    filename: &apos;[name].js&apos;,</span><br><span class=\"line\">    // 正式发布环境下webpack编译输出的发布路径</span><br><span class=\"line\">    publicPath: process.env.NODE_ENV === &apos;production&apos;</span><br><span class=\"line\">      ? config.build.assetsPublicPath</span><br><span class=\"line\">      : config.dev.assetsPublicPath</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    // 自动补全的扩展名</span><br><span class=\"line\">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class=\"line\">    // 路径代理,创建路径别名，有了别名之后引用模块更方便</span><br><span class=\"line\">    // 例如:import Vue from &apos;vue/dist/vue.common.js&apos;可以写成 import Vue from &apos;vue&apos;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class=\"line\">      &apos;@&apos;: resolve(&apos;src&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置不同类型模块的处理规则</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对src和test文件夹下的.js和.vue文件使用eslint-loader</span><br><span class=\"line\">        test: /\\.(js|vue)$/,</span><br><span class=\"line\">        loader: &apos;eslint-loader&apos;,</span><br><span class=\"line\">        enforce: &apos;pre&apos;,</span><br><span class=\"line\">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          formatter: require(&apos;eslint-friendly-formatter&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对所有.vue文件使用vue-loader</span><br><span class=\"line\">        test: /\\.vue$/,</span><br><span class=\"line\">        loader: &apos;vue-loader&apos;,</span><br><span class=\"line\">        options: vueLoaderConfig</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对src和test文件夹下的.js文件使用babel-loader</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对图片资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class=\"line\">        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对字体资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class=\"line\">        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;media/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;fonts/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack.base.conf.js主要完成了下面这些事情：</p>\n<p>1.配置webpack编译入口</p>\n<p>2.配置webpack输出路径和命名规则</p>\n<p>3.配置模块resolve规则</p>\n<p>4.配置不同类型模块的处理规则</p>\n<p>注：这个配置里面只配置了.js、.vue、图片、字体等文件的处理规则，如果需要处理其他文件可以在module.rules里面配置。</p>\n<hr>\n<h3 id=\"webpack-dev-conf-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a>webpack.dev.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 使用 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// 同样的使用了 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 使用 webpack 配置合并插件,可以合并数组和对象</span><br><span class=\"line\">var merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">// 加载 webpack.base.conf，webpack基础配置</span><br><span class=\"line\">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class=\"line\">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class=\"line\">//(自动注入依赖文件（link/script）的webpack插件)</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\">// 用于更友好地输出webpack的警告、错误等信息</span><br><span class=\"line\">var FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// add hot-reload related code to entry chunks</span><br><span class=\"line\">// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前，指定入口js文件</span><br><span class=\"line\">Object.keys(baseWebpackConfig.entry).forEach(function (name) &#123;</span><br><span class=\"line\">  baseWebpackConfig.entry[name] = [&apos;./build/dev-client&apos;].concat(baseWebpackConfig.entry[name])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并</span><br><span class=\"line\">module.exports = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  // 配置样式文件的处理规则，使用styleLoaders</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // cheap-module-eval-source-map is faster for development</span><br><span class=\"line\">   // 配置Source Maps。使用 #cheap-module-eval-source-map 模式作为开发工具，在开发中使用cheap-module-eval-source-map更快</span><br><span class=\"line\">  devtool: &apos;#cheap-module-eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 配置webpack插件</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class=\"line\">    new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      &apos;process.env&apos;: config.dev.env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span><br><span class=\"line\">    // HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件</span><br><span class=\"line\">    new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">     // 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错</span><br><span class=\"line\">    new webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">    // https://github.com/ampedandwired/html-webpack-plugin</span><br><span class=\"line\">    // 将 index.html 作为入口，注入 html 代码后生成 index.html文件</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: &apos;index.html&apos;,</span><br><span class=\"line\">      template: &apos;index.html&apos;,</span><br><span class=\"line\">      inject: true</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new FriendlyErrorsPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>该文件主要完成以下事情：</p>\n<p>1.将hot-reload相关的代码添加到entry chunks。</p>\n<p>2.合并基础的webpack配置。</p>\n<p>3.使用styleLoaders。</p>\n<p>4.配置Source Maps。</p>\n<p>5.配置webpack插件。</p>\n<hr>\n<h3 id=\"webpack-prod-conf-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#webpack-prod-conf-js\" class=\"headerlink\" title=\"webpack.prod.conf.js\"></a>webpack.prod.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 使用一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 加载 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// 加载 confi.index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 加载 webpack 配置合并工具</span><br><span class=\"line\">var merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">// 加载 webpack.base.conf.js</span><br><span class=\"line\">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class=\"line\">//使用copy-webpack-plugin插件</span><br><span class=\"line\">var CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class=\"line\">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于从webpack生成的bundle中提取文本到特定文件中的插件</span><br><span class=\"line\">// 可以抽取出css，js文件将其与webpack输出的bundle分离</span><br><span class=\"line\">var ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//使用js,css压缩插件</span><br><span class=\"line\">var OptimizeCSSPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//判断当前环境是否为测试环境，如是加载测试环境配置文件，否则使用config.build.env</span><br><span class=\"line\">var env = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">  ? require(&apos;../config/test.env&apos;)</span><br><span class=\"line\">  : config.build.env</span><br><span class=\"line\">// 合并 webpack.base.conf.js</span><br><span class=\"line\">var webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    // 使用的 loader</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      extract: true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 是否使用 #source-map 开发工具</span><br><span class=\"line\">  devtool: config.build.productionSourceMap ? &apos;#source-map&apos; : false,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    // 编译输出目录</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    // 编译输出文件名</span><br><span class=\"line\">    // 我们可以在 hash 后加 :6 决定使用几位 hash 值</span><br><span class=\"line\">    filename: utils.assetsPath(&apos;js/[name].[chunkhash].js&apos;),</span><br><span class=\"line\">    // 没有指定输出名的文件输出的文件名</span><br><span class=\"line\">    chunkFilename: utils.assetsPath(&apos;js/[id].[chunkhash].js&apos;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 使用的插件</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // http://vuejs.github.io/vue-loader/en/workflow/production.html</span><br><span class=\"line\">     // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class=\"line\">    new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      &apos;process.env&apos;: env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // 压缩 js (同样可以压缩 css)</span><br><span class=\"line\">    new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: false</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sourceMap: true</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // extract css into its own file</span><br><span class=\"line\">    // 将 css 文件分离出来</span><br><span class=\"line\">    new ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: utils.assetsPath(&apos;css/[name].[contenthash].css&apos;)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // Compress extracted CSS. We are using this plugin so that possible</span><br><span class=\"line\">    // duplicated CSS from different components can be deduped.</span><br><span class=\"line\">    new OptimizeCSSPlugin(&#123;</span><br><span class=\"line\">      cssProcessorOptions: &#123;</span><br><span class=\"line\">        safe: true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // generate dist index.html with correct asset hash for caching.</span><br><span class=\"line\">    // you can customize output by editing /index.html</span><br><span class=\"line\">    // see https://github.com/ampedandwired/html-webpack-plugin</span><br><span class=\"line\">    // 输入输出的 .html 文件</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">        ? &apos;index.html&apos;</span><br><span class=\"line\">        : config.build.index,</span><br><span class=\"line\">      template: &apos;index.html&apos;,</span><br><span class=\"line\">      // 是否注入 html</span><br><span class=\"line\">      inject: true,</span><br><span class=\"line\">      // 压缩的方式</span><br><span class=\"line\">      minify: &#123;</span><br><span class=\"line\">        removeComments: true,</span><br><span class=\"line\">        collapseWhitespace: true,</span><br><span class=\"line\">        removeAttributeQuotes: true</span><br><span class=\"line\">        // more options:</span><br><span class=\"line\">        // https://github.com/kangax/html-minifier#options-quick-reference</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // necessary to consistently work with multiple chunks via CommonsChunkPlugin</span><br><span class=\"line\">      chunksSortMode: &apos;dependency&apos;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // split vendor js into its own file</span><br><span class=\"line\">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;vendor&apos;,</span><br><span class=\"line\">      minChunks: function (module, count) &#123;</span><br><span class=\"line\">        // any required modules inside node_modules are extracted to vendor</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          module.resource &amp;&amp;</span><br><span class=\"line\">          /\\.js$/.test(module.resource) &amp;&amp;</span><br><span class=\"line\">          module.resource.indexOf(</span><br><span class=\"line\">            path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class=\"line\">          ) === 0</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // extract webpack runtime and module manifest to its own file in order to</span><br><span class=\"line\">    // prevent vendor hash from being updated whenever app bundle is updated</span><br><span class=\"line\">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;manifest&apos;,</span><br><span class=\"line\">      chunks: [&apos;vendor&apos;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // copy custom static assets</span><br><span class=\"line\">    new CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        from: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class=\"line\">        to: config.build.assetsSubDirectory,</span><br><span class=\"line\">        ignore: [&apos;.*&apos;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 开启 gzip 的情况下使用下方的配置,引入compression插件进行压缩</span><br><span class=\"line\">if (config.build.productionGzip) &#123;</span><br><span class=\"line\">  var CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;)</span><br><span class=\"line\"> // 加载 compression-webpack-plugin 插件</span><br><span class=\"line\"> var reProductionGzipExtensions = &apos;\\\\.(&apos; +</span><br><span class=\"line\">        config.build.productionGzipExtensions.join(&apos;|&apos;) +</span><br><span class=\"line\">        &apos;)$&apos;;</span><br><span class=\"line\">  // 使用 compression-webpack-plugin 插件进行压缩</span><br><span class=\"line\">  webpackConfig.plugins.push(</span><br><span class=\"line\">    new CompressionWebpackPlugin(&#123;</span><br><span class=\"line\">      asset: &apos;[path].gz[query]&apos;,</span><br><span class=\"line\">      algorithm: &apos;gzip&apos;,</span><br><span class=\"line\">      test: new RegExp(reProductionGzipExtensions),</span><br><span class=\"line\">      threshold: 10240,</span><br><span class=\"line\">      minRatio: 0.8</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">  var BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br><span class=\"line\">  webpackConfig.plugins.push(new BundleAnalyzerPlugin())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<p>该文件主要用处：</p>\n<p>1.合并基础的webpack.base.conf.js文件配置。</p>\n<p>2.使用styleLoaders。</p>\n<p>3.配置webpack的输出路径。</p>\n<p>4.配置webpack插件。</p>\n<p>5.gzip模式下的webpack插件配置。</p>\n<p>6.webpack-bundle分析。</p>\n<p>注：webpack插件里面使用了压缩代码以及抽离css文件等插件。</p>\n<hr>\n<h2 id=\"config文件夹\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#config文件夹\" class=\"headerlink\" title=\"config文件夹\"></a>config文件夹</h2><h3 id=\"index-js\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // production 环境</span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    // 使用 config/prod.env.js 中定义的编译环境</span><br><span class=\"line\">    env: require(&apos;./prod.env&apos;),</span><br><span class=\"line\">    // 编译输入的 index.html 文件</span><br><span class=\"line\">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class=\"line\">    // 编译输出的静态资源根路径</span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class=\"line\">    // 编译输出的二级目录</span><br><span class=\"line\">    assetsSubDirectory: &apos;static&apos;,</span><br><span class=\"line\">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class=\"line\">    assetsPublicPath: &apos;./&apos;,</span><br><span class=\"line\">    // 是否开启 cssSourceMap</span><br><span class=\"line\">    productionSourceMap: true,</span><br><span class=\"line\">    // Gzip off by default as many popular static hosts such as</span><br><span class=\"line\">    // Surge or Netlify already gzip all static assets for you.</span><br><span class=\"line\">    // Before setting to `true`, make sure to:</span><br><span class=\"line\">    // npm install --save-dev compression-webpack-plugin</span><br><span class=\"line\">    // 是否开启 gzip,默认不开启</span><br><span class=\"line\">    productionGzip: false,</span><br><span class=\"line\">    // gzip模式下需要压缩的文件的扩展名</span><br><span class=\"line\">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class=\"line\">    // Run the build command with an extra argument to</span><br><span class=\"line\">    // View the bundle analyzer report after build finishes:</span><br><span class=\"line\">    // `npm run build --report`</span><br><span class=\"line\">    // Set to `true` or `false` to always turn it on or off</span><br><span class=\"line\">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // dev 环境</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\">    // 使用 config/dev.env.js 中定义的编译环境</span><br><span class=\"line\">    env: require(&apos;./dev.env&apos;),</span><br><span class=\"line\">    // 运行测试页面的端口</span><br><span class=\"line\">    port: 8087,</span><br><span class=\"line\">    // 启动dev-server之后自动打开浏览器</span><br><span class=\"line\">    autoOpenBrowser: true,</span><br><span class=\"line\">    // 编译输出的二级目录</span><br><span class=\"line\">    assetsSubDirectory: &apos;static&apos;,</span><br><span class=\"line\">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class=\"line\">    assetsPublicPath: &apos;/&apos;,</span><br><span class=\"line\">    // 需要 proxyTable 代理的接口（可跨域）</span><br><span class=\"line\">    proxyTable: &#123;&#125;,</span><br><span class=\"line\">    //静态网址</span><br><span class=\"line\">    /*proxyTable: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 下面的示例将代理请求/api/posts/1到http://jsonplaceholder.typicode.com/posts/1。</span><br><span class=\"line\">      &apos;/api&apos;: &#123;</span><br><span class=\"line\">        target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class=\"line\">        changeOrigin: true,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          &apos;^/api&apos;: &apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\">    //changeOrigin:true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。</span><br><span class=\"line\">    // 除了静态网址之外，您还可以使用glob模式来匹配URL，例如/api/**。有关详细信息，请参阅上下文匹配。</span><br><span class=\"line\">    // 此外，您可以提供一个filter可以是自定义函数的选项，以确定请求是否应被代理：</span><br><span class=\"line\">    /*proxyTable: &#123;</span><br><span class=\"line\">      &apos;*&apos;: &#123;</span><br><span class=\"line\">            target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class=\"line\">            filter: function (pathname, req) &#123;</span><br><span class=\"line\">              return pathname.match(&apos;^/api&apos;) &amp;&amp; req.method === &apos;GET&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">    // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class=\"line\">    // with this option, according to the CSS-Loader README</span><br><span class=\"line\">    // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class=\"line\">    // In our experience, they generally work as expected,</span><br><span class=\"line\">    // just be aware of this issue when enabling this option.</span><br><span class=\"line\">    // 是否开启 cssSourceMap</span><br><span class=\"line\">    cssSourceMap: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件配置了开发和生产两种环境下的配置。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"/2018/02/10/vue-cli构建Vue项目结构分析/#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>webpack的使用博大精深，仅仅了解到这里也只是入门。代码可以直接到我的github直接拉取，仓库地址<a href=\"https://github.com/HeyingYe/vue-structural-analysis\" target=\"_blank\" rel=\"noopener\">https://github.com/HeyingYe/vue-structural-analysis</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>使用vue-cli脚手架搭建vue项目的具体步骤如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">cd E:(跳转到项目目录)</span><br><span class=\"line\">vue init webpack vueproject (vueproject 为项目目录名称，可行更改)</span><br><span class=\"line\">cd vueproject</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"项目结构分析\"><a href=\"#项目结构分析\" class=\"headerlink\" title=\"项目结构分析\"></a>项目结构分析</h2><p><img src=\"img/project.png\" alt=\"项目结构\"></p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>抽取package.json文件重要部分分析</p>\n<blockquote>\n<p>scripts字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;node build/build.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目开发周期主要执行的两个任务分别是开发环境<code>npm run dev</code>和打包任务<code>npm run build</code>,script字段是用来指定npm相关命令的缩写的,即相当于在node环境下执行build/dev-server.js和node build/build.js文件。</p>\n<hr>\n<blockquote>\n<p>dependencies和devDependencies字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;vue&quot;: &quot;^2.3.3&quot;,</span><br><span class=\"line\">    &quot;vue-router&quot;: &quot;^2.6.0&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;,</span><br><span class=\"line\">    &quot;babel-core&quot;: &quot;^6.22.1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dependencies字段指定了项目运行时所依赖的模块，devDependencies字段指定了项目开发时所依赖的模块。项目开发应使用命令管理package.json文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save vue              \\\\自动写入package.json文件的dependencies字段；</span><br><span class=\"line\">npm i --save-dev babel-core \\\\自动写入package.json文件的devDependencies字段；</span><br></pre></td></tr></table></figure></p>\n<p>注：i为install的缩写</p>\n<hr>\n<blockquote>\n<p>engine和browserslist字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;engines&quot;: &#123;</span><br><span class=\"line\">  &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,</span><br><span class=\"line\">  &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;browserslist&quot;: [</span><br><span class=\"line\">  &quot;&gt; 1%&quot;,</span><br><span class=\"line\">  &quot;last 2 versions&quot;,</span><br><span class=\"line\">  &quot;not ie &lt;= 8&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>engines字段表示项目运行所依赖的node以及npm版本号，browserslist表示项目的浏览器支持情况，具体详情可以查看<a href=\"https://www.npmjs.com/package/browserslist\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/browserslist</a>。</p>\n<h2 id=\"build文件夹\"><a href=\"#build文件夹\" class=\"headerlink\" title=\"build文件夹\"></a>build文件夹</h2><h3 id=\"dev-server-js\"><a href=\"#dev-server-js\" class=\"headerlink\" title=\"dev-server.js\"></a>dev-server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查 Node 和 npm 版本</span><br><span class=\"line\">require(&apos;./check-versions&apos;)()</span><br><span class=\"line\">//使用了 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 如果 Node 的环境无法判断当前是 dev / product 环境</span><br><span class=\"line\">if (!process.env.NODE_ENV) &#123;</span><br><span class=\"line\">// 使用 config.dev.env.NODE_ENV 作为当前的环境</span><br><span class=\"line\">  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span><br><span class=\"line\">//(可以调用默认软件打开网址、图片、文件等内容的插件,</span><br><span class=\"line\">//这里用它来调用默认浏览器打开dev-server监听的端口，例如：localhost:8080)</span><br><span class=\"line\">var opn = require(&apos;opn&apos;)</span><br><span class=\"line\">// 使用 NodeJS 自带的文件路径工具</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 使用 express</span><br><span class=\"line\">var express = require(&apos;express&apos;)</span><br><span class=\"line\">// 使用 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离</span><br><span class=\"line\">// 在config/index.js中可以对proxyTable想进行配置</span><br><span class=\"line\">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</span><br><span class=\"line\">// 根据 Node 环境来引入相应的 webpack 配置</span><br><span class=\"line\">var webpackConfig = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">  ? require(&apos;./webpack.prod.conf&apos;)</span><br><span class=\"line\">  : require(&apos;./webpack.dev.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// default port where dev server listens for incoming traffic</span><br><span class=\"line\">// 如果没有指定运行端口，使用 config.dev.port 作为运行端口</span><br><span class=\"line\">var port = process.env.PORT || config.dev.port</span><br><span class=\"line\">// automatically open browser, if not set will be false</span><br><span class=\"line\">// 用于判断是否要自动打开浏览器的布尔变量，当配置文件中没有设置自动打开浏览器的时候其值为 false</span><br><span class=\"line\">var autoOpenBrowser = !!config.dev.autoOpenBrowser</span><br><span class=\"line\"></span><br><span class=\"line\">// Define HTTP proxies to your custom API backend</span><br><span class=\"line\">// https://github.com/chimurai/http-proxy-middleware</span><br><span class=\"line\">// 定义 HTTP 代理表，代理到 API 服务器</span><br><span class=\"line\">// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置</span><br><span class=\"line\">var proxyTable = config.dev.proxyTable</span><br><span class=\"line\">// 使用 express 启动一个服务</span><br><span class=\"line\">var app = express()</span><br><span class=\"line\">// 启动 webpack 进行编译</span><br><span class=\"line\">var compiler = webpack(webpackConfig)</span><br><span class=\"line\">// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中</span><br><span class=\"line\">//(webpack-dev-middleware使用compiler对象来对相应的文件进行编译和绑定</span><br><span class=\"line\">// 编译绑定后将得到的产物存放在内存中而没有写进磁盘</span><br><span class=\"line\">// 将这个中间件交给express使用之后即可访问这些编译后的产品文件)</span><br><span class=\"line\">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</span><br><span class=\"line\">  publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">  quiet: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload用于实现热重载功能的中间件</span><br><span class=\"line\">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler, &#123;</span><br><span class=\"line\">  log: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  heartbeat: 2000</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// force page reload when html-webpack-plugin template changes</span><br><span class=\"line\">// 当html-webpack-plugin提交之后通过热重载中间件发布重载动作使得页面重载</span><br><span class=\"line\">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</span><br><span class=\"line\">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</span><br><span class=\"line\">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// proxy api requests</span><br><span class=\"line\">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span><br><span class=\"line\">//Object.keys()返回对象的键名数组</span><br><span class=\"line\">Object.keys(proxyTable).forEach(function (context) &#123;</span><br><span class=\"line\">  var options = proxyTable[context]</span><br><span class=\"line\">  if (typeof options === &apos;string&apos;) &#123;</span><br><span class=\"line\">    options = &#123; target: options &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  app.use(proxyMiddleware(options.filter || context, options))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// handle fallback for HTML5 history API</span><br><span class=\"line\">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址，常用于SPA</span><br><span class=\"line\">app.use(require(&apos;connect-history-api-fallback&apos;)())</span><br><span class=\"line\"></span><br><span class=\"line\">// serve webpack bundle output</span><br><span class=\"line\">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">// enable hot-reload and state-preserving</span><br><span class=\"line\">// compilation error display</span><br><span class=\"line\">// 将热重载中间件(Hot-reload)挂在到express服务器上</span><br><span class=\"line\">app.use(hotMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\">// serve pure static assets</span><br><span class=\"line\">// 拼接 static 文件夹的静态资源路径</span><br><span class=\"line\">var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class=\"line\">// 为静态资源提供响应服务</span><br><span class=\"line\">app.use(staticPath, express.static(&apos;./static&apos;))</span><br><span class=\"line\">// 应用的地址信息，例如：http://localhost:8080</span><br><span class=\"line\">var uri = &apos;http://localhost:&apos; + port</span><br><span class=\"line\"></span><br><span class=\"line\">var _resolve</span><br><span class=\"line\">var readyPromise = new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">  _resolve = resolve</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;&gt; Starting dev server...&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// webpack开发中间件合法（valid）之后输出提示语到控制台，表明服务器已启动</span><br><span class=\"line\">devMiddleware.waitUntilValid(() =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;&gt; Listening at &apos; + uri + &apos;\\n&apos;)</span><br><span class=\"line\">  // when env is testing, don&apos;t need open it</span><br><span class=\"line\">  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span><br><span class=\"line\">  if (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== &apos;testing&apos;) &#123;</span><br><span class=\"line\">    opn(uri)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _resolve()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//监听服务器端口</span><br><span class=\"line\">var server = app.listen(port)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ready: readyPromise,</span><br><span class=\"line\">  close: () =&gt; &#123;</span><br><span class=\"line\">    server.close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件主要完成以下事情：</p>\n<p>1.检查node和npm的版本。</p>\n<p>2.引入相关插件和配置。</p>\n<p>3.创建express服务器和webpack编译器。</p>\n<p>4.配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）。</p>\n<p>5.挂载代理服务和中间件。</p>\n<p>6.配置静态资源。</p>\n<p>7.启动服务器监听特定端口（8080）。</p>\n<p>8.自动打开浏览器并打开特定网址（localhost:8080）。</p>\n<p>注：express服务器提供静态文件服务，不过它可以使用了http-proxy-middleware,一个http请求代理的中间件。前端开发过程中需要使用到后台的API的话，可以通过配置proxyTable来将相应的后台请求代理到专用的API服务器。</p>\n<hr>\n<h3 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查 Node 和 npm 版本</span><br><span class=\"line\">require(&apos;./check-versions&apos;)()</span><br><span class=\"line\">//生产环境</span><br><span class=\"line\">process.env.NODE_ENV = &apos;production&apos;</span><br><span class=\"line\">// 一个很好看的 loading 插件</span><br><span class=\"line\">var ora = require(&apos;ora&apos;)</span><br><span class=\"line\">var rm = require(&apos;rimraf&apos;)</span><br><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 用于在控制台输出带颜色字体的插件</span><br><span class=\"line\">var chalk = require(&apos;chalk&apos;)</span><br><span class=\"line\">//加载webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">//加载config中index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">//加载webpack.prod.conf</span><br><span class=\"line\">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var spinner = ora(&apos;building for production...&apos;)</span><br><span class=\"line\">spinner.start()// 开启loading动画</span><br><span class=\"line\">// 拼接编译输出文件路径</span><br><span class=\"line\">var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);</span><br><span class=\"line\">// 删除这个文件夹 （递归删除）</span><br><span class=\"line\">rm(assetsPath, err =&gt; &#123;</span><br><span class=\"line\">  if (err) throw err</span><br><span class=\"line\">    //  开始 webpack 的编译</span><br><span class=\"line\">  webpack(webpackConfig, function (err, stats) &#123;</span><br><span class=\"line\">    // 编译成功的回调函数</span><br><span class=\"line\">    spinner.stop()</span><br><span class=\"line\">    if (err) throw err</span><br><span class=\"line\">    process.stdout.write(stats.toString(&#123;</span><br><span class=\"line\">      colors: true,</span><br><span class=\"line\">      modules: false,</span><br><span class=\"line\">      children: false,</span><br><span class=\"line\">      chunks: false,</span><br><span class=\"line\">      chunkModules: false</span><br><span class=\"line\">    &#125;) + &apos;\\n\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(chalk.cyan(&apos;  Build complete.\\n&apos;))</span><br><span class=\"line\">    console.log(chalk.yellow(</span><br><span class=\"line\">      &apos;  Tip: built files are meant to be served over an HTTP server.\\n&apos; +</span><br><span class=\"line\">      &apos;  Opening index.html over file:// won\\&apos;t work.\\n&apos;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>build.js主要作用为：</p>\n<p>1.显示打包loading动画。</p>\n<p>2.删除并创建目标文件夹。</p>\n<p>3.webpack编译源文件。</p>\n<p>4.输出打包后的文件。</p>\n<p>注：webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。</p>\n<hr>\n<h3 id=\"check-versions-js\"><a href=\"#check-versions-js\" class=\"headerlink\" title=\"check-versions.js\"></a>check-versions.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用于在控制台输出带颜色字体的插件</span><br><span class=\"line\">var chalk = require(&apos;chalk&apos;)</span><br><span class=\"line\">// 语义化版本检查插件</span><br><span class=\"line\">var semver = require(&apos;semver&apos;)</span><br><span class=\"line\">// 引入package.json</span><br><span class=\"line\">var packageConfig = require(&apos;../package.json&apos;)</span><br><span class=\"line\">var shell = require(&apos;shelljs&apos;)</span><br><span class=\"line\">// 开辟子进程执行指令cmd并返回结果</span><br><span class=\"line\">function exec (cmd) &#123;</span><br><span class=\"line\">  return require(&apos;child_process&apos;).execSync(cmd).toString().trim()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// node和npm版本需求</span><br><span class=\"line\">var versionRequirements = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &apos;node&apos;,</span><br><span class=\"line\">    currentVersion: semver.clean(process.version),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.node</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">if (shell.which(&apos;npm&apos;)) &#123;</span><br><span class=\"line\">  versionRequirements.push(&#123;</span><br><span class=\"line\">    name: &apos;npm&apos;,</span><br><span class=\"line\">    currentVersion: exec(&apos;npm --version&apos;),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.npm</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function () &#123;</span><br><span class=\"line\">  var warnings = []</span><br><span class=\"line\">  // 依次判断版本是否符合要求</span><br><span class=\"line\">  for (var i = 0; i &lt; versionRequirements.length; i++) &#123;</span><br><span class=\"line\">    var mod = versionRequirements[i]</span><br><span class=\"line\">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class=\"line\">      warnings.push(mod.name + &apos;: &apos; +</span><br><span class=\"line\">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</span><br><span class=\"line\">        chalk.green(mod.versionRequirement)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 如果有警告则将其输出到控制台</span><br><span class=\"line\">  if (warnings.length) &#123;</span><br><span class=\"line\">    console.log(chalk.yellow(&apos;To use this template, you must update following to modules:&apos;))</span><br><span class=\"line\">    for (var i = 0; i &lt; warnings.length; i++) &#123;</span><br><span class=\"line\">      var warning = warnings[i]</span><br><span class=\"line\">      console.log(&apos;  &apos; + warning)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。</p>\n<hr>\n<h3 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 引入一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 引入 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">var vueLoaderConfig = require(&apos;./vue-loader.conf&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 拼接我们的工作区路径为一个绝对路径</span><br><span class=\"line\">function resolve (dir) &#123;</span><br><span class=\"line\">  return path.join(__dirname, &apos;..&apos;, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 配置webpack编译入口</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: &apos;./src/main.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置webpack输出路径和命名规则</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    // webpack输出的目标文件夹路径（例如：/dist）</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    // webpack输出bundle文件命名格式</span><br><span class=\"line\">    filename: &apos;[name].js&apos;,</span><br><span class=\"line\">    // 正式发布环境下webpack编译输出的发布路径</span><br><span class=\"line\">    publicPath: process.env.NODE_ENV === &apos;production&apos;</span><br><span class=\"line\">      ? config.build.assetsPublicPath</span><br><span class=\"line\">      : config.dev.assetsPublicPath</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    // 自动补全的扩展名</span><br><span class=\"line\">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class=\"line\">    // 路径代理,创建路径别名，有了别名之后引用模块更方便</span><br><span class=\"line\">    // 例如:import Vue from &apos;vue/dist/vue.common.js&apos;可以写成 import Vue from &apos;vue&apos;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class=\"line\">      &apos;@&apos;: resolve(&apos;src&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置不同类型模块的处理规则</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对src和test文件夹下的.js和.vue文件使用eslint-loader</span><br><span class=\"line\">        test: /\\.(js|vue)$/,</span><br><span class=\"line\">        loader: &apos;eslint-loader&apos;,</span><br><span class=\"line\">        enforce: &apos;pre&apos;,</span><br><span class=\"line\">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          formatter: require(&apos;eslint-friendly-formatter&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对所有.vue文件使用vue-loader</span><br><span class=\"line\">        test: /\\.vue$/,</span><br><span class=\"line\">        loader: &apos;vue-loader&apos;,</span><br><span class=\"line\">        options: vueLoaderConfig</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对src和test文件夹下的.js文件使用babel-loader</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对图片资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class=\"line\">        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        // 对字体资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class=\"line\">        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;media/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: 10000,</span><br><span class=\"line\">          name: utils.assetsPath(&apos;fonts/[name].[hash:7].[ext]&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack.base.conf.js主要完成了下面这些事情：</p>\n<p>1.配置webpack编译入口</p>\n<p>2.配置webpack输出路径和命名规则</p>\n<p>3.配置模块resolve规则</p>\n<p>4.配置不同类型模块的处理规则</p>\n<p>注：这个配置里面只配置了.js、.vue、图片、字体等文件的处理规则，如果需要处理其他文件可以在module.rules里面配置。</p>\n<hr>\n<h3 id=\"webpack-dev-conf-js\"><a href=\"#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a>webpack.dev.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 使用 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// 同样的使用了 config/index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 使用 webpack 配置合并插件,可以合并数组和对象</span><br><span class=\"line\">var merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">// 加载 webpack.base.conf，webpack基础配置</span><br><span class=\"line\">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class=\"line\">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class=\"line\">//(自动注入依赖文件（link/script）的webpack插件)</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\">// 用于更友好地输出webpack的警告、错误等信息</span><br><span class=\"line\">var FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// add hot-reload related code to entry chunks</span><br><span class=\"line\">// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前，指定入口js文件</span><br><span class=\"line\">Object.keys(baseWebpackConfig.entry).forEach(function (name) &#123;</span><br><span class=\"line\">  baseWebpackConfig.entry[name] = [&apos;./build/dev-client&apos;].concat(baseWebpackConfig.entry[name])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并</span><br><span class=\"line\">module.exports = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  // 配置样式文件的处理规则，使用styleLoaders</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // cheap-module-eval-source-map is faster for development</span><br><span class=\"line\">   // 配置Source Maps。使用 #cheap-module-eval-source-map 模式作为开发工具，在开发中使用cheap-module-eval-source-map更快</span><br><span class=\"line\">  devtool: &apos;#cheap-module-eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 配置webpack插件</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class=\"line\">    new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      &apos;process.env&apos;: config.dev.env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span><br><span class=\"line\">    // HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件</span><br><span class=\"line\">    new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">     // 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错</span><br><span class=\"line\">    new webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">    // https://github.com/ampedandwired/html-webpack-plugin</span><br><span class=\"line\">    // 将 index.html 作为入口，注入 html 代码后生成 index.html文件</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: &apos;index.html&apos;,</span><br><span class=\"line\">      template: &apos;index.html&apos;,</span><br><span class=\"line\">      inject: true</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new FriendlyErrorsPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>该文件主要完成以下事情：</p>\n<p>1.将hot-reload相关的代码添加到entry chunks。</p>\n<p>2.合并基础的webpack配置。</p>\n<p>3.使用styleLoaders。</p>\n<p>4.配置Source Maps。</p>\n<p>5.配置webpack插件。</p>\n<hr>\n<h3 id=\"webpack-prod-conf-js\"><a href=\"#webpack-prod-conf-js\" class=\"headerlink\" title=\"webpack.prod.conf.js\"></a>webpack.prod.conf.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\">// 使用一些小工具</span><br><span class=\"line\">var utils = require(&apos;./utils&apos;)</span><br><span class=\"line\">// 加载 webpack</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">// 加载 confi.index.js</span><br><span class=\"line\">var config = require(&apos;../config&apos;)</span><br><span class=\"line\">// 加载 webpack 配置合并工具</span><br><span class=\"line\">var merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">// 加载 webpack.base.conf.js</span><br><span class=\"line\">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class=\"line\">//使用copy-webpack-plugin插件</span><br><span class=\"line\">var CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class=\"line\">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于从webpack生成的bundle中提取文本到特定文件中的插件</span><br><span class=\"line\">// 可以抽取出css，js文件将其与webpack输出的bundle分离</span><br><span class=\"line\">var ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//使用js,css压缩插件</span><br><span class=\"line\">var OptimizeCSSPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//判断当前环境是否为测试环境，如是加载测试环境配置文件，否则使用config.build.env</span><br><span class=\"line\">var env = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">  ? require(&apos;../config/test.env&apos;)</span><br><span class=\"line\">  : config.build.env</span><br><span class=\"line\">// 合并 webpack.base.conf.js</span><br><span class=\"line\">var webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    // 使用的 loader</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      extract: true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 是否使用 #source-map 开发工具</span><br><span class=\"line\">  devtool: config.build.productionSourceMap ? &apos;#source-map&apos; : false,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    // 编译输出目录</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    // 编译输出文件名</span><br><span class=\"line\">    // 我们可以在 hash 后加 :6 决定使用几位 hash 值</span><br><span class=\"line\">    filename: utils.assetsPath(&apos;js/[name].[chunkhash].js&apos;),</span><br><span class=\"line\">    // 没有指定输出名的文件输出的文件名</span><br><span class=\"line\">    chunkFilename: utils.assetsPath(&apos;js/[id].[chunkhash].js&apos;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 使用的插件</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // http://vuejs.github.io/vue-loader/en/workflow/production.html</span><br><span class=\"line\">     // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class=\"line\">    new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      &apos;process.env&apos;: env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // 压缩 js (同样可以压缩 css)</span><br><span class=\"line\">    new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: false</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sourceMap: true</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // extract css into its own file</span><br><span class=\"line\">    // 将 css 文件分离出来</span><br><span class=\"line\">    new ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: utils.assetsPath(&apos;css/[name].[contenthash].css&apos;)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // Compress extracted CSS. We are using this plugin so that possible</span><br><span class=\"line\">    // duplicated CSS from different components can be deduped.</span><br><span class=\"line\">    new OptimizeCSSPlugin(&#123;</span><br><span class=\"line\">      cssProcessorOptions: &#123;</span><br><span class=\"line\">        safe: true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // generate dist index.html with correct asset hash for caching.</span><br><span class=\"line\">    // you can customize output by editing /index.html</span><br><span class=\"line\">    // see https://github.com/ampedandwired/html-webpack-plugin</span><br><span class=\"line\">    // 输入输出的 .html 文件</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: process.env.NODE_ENV === &apos;testing&apos;</span><br><span class=\"line\">        ? &apos;index.html&apos;</span><br><span class=\"line\">        : config.build.index,</span><br><span class=\"line\">      template: &apos;index.html&apos;,</span><br><span class=\"line\">      // 是否注入 html</span><br><span class=\"line\">      inject: true,</span><br><span class=\"line\">      // 压缩的方式</span><br><span class=\"line\">      minify: &#123;</span><br><span class=\"line\">        removeComments: true,</span><br><span class=\"line\">        collapseWhitespace: true,</span><br><span class=\"line\">        removeAttributeQuotes: true</span><br><span class=\"line\">        // more options:</span><br><span class=\"line\">        // https://github.com/kangax/html-minifier#options-quick-reference</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // necessary to consistently work with multiple chunks via CommonsChunkPlugin</span><br><span class=\"line\">      chunksSortMode: &apos;dependency&apos;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // split vendor js into its own file</span><br><span class=\"line\">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;vendor&apos;,</span><br><span class=\"line\">      minChunks: function (module, count) &#123;</span><br><span class=\"line\">        // any required modules inside node_modules are extracted to vendor</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          module.resource &amp;&amp;</span><br><span class=\"line\">          /\\.js$/.test(module.resource) &amp;&amp;</span><br><span class=\"line\">          module.resource.indexOf(</span><br><span class=\"line\">            path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class=\"line\">          ) === 0</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // extract webpack runtime and module manifest to its own file in order to</span><br><span class=\"line\">    // prevent vendor hash from being updated whenever app bundle is updated</span><br><span class=\"line\">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class=\"line\">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;manifest&apos;,</span><br><span class=\"line\">      chunks: [&apos;vendor&apos;]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    // copy custom static assets</span><br><span class=\"line\">    new CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        from: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class=\"line\">        to: config.build.assetsSubDirectory,</span><br><span class=\"line\">        ignore: [&apos;.*&apos;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 开启 gzip 的情况下使用下方的配置,引入compression插件进行压缩</span><br><span class=\"line\">if (config.build.productionGzip) &#123;</span><br><span class=\"line\">  var CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;)</span><br><span class=\"line\"> // 加载 compression-webpack-plugin 插件</span><br><span class=\"line\"> var reProductionGzipExtensions = &apos;\\\\.(&apos; +</span><br><span class=\"line\">        config.build.productionGzipExtensions.join(&apos;|&apos;) +</span><br><span class=\"line\">        &apos;)$&apos;;</span><br><span class=\"line\">  // 使用 compression-webpack-plugin 插件进行压缩</span><br><span class=\"line\">  webpackConfig.plugins.push(</span><br><span class=\"line\">    new CompressionWebpackPlugin(&#123;</span><br><span class=\"line\">      asset: &apos;[path].gz[query]&apos;,</span><br><span class=\"line\">      algorithm: &apos;gzip&apos;,</span><br><span class=\"line\">      test: new RegExp(reProductionGzipExtensions),</span><br><span class=\"line\">      threshold: 10240,</span><br><span class=\"line\">      minRatio: 0.8</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">  var BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br><span class=\"line\">  webpackConfig.plugins.push(new BundleAnalyzerPlugin())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<p>该文件主要用处：</p>\n<p>1.合并基础的webpack.base.conf.js文件配置。</p>\n<p>2.使用styleLoaders。</p>\n<p>3.配置webpack的输出路径。</p>\n<p>4.配置webpack插件。</p>\n<p>5.gzip模式下的webpack插件配置。</p>\n<p>6.webpack-bundle分析。</p>\n<p>注：webpack插件里面使用了压缩代码以及抽离css文件等插件。</p>\n<hr>\n<h2 id=\"config文件夹\"><a href=\"#config文件夹\" class=\"headerlink\" title=\"config文件夹\"></a>config文件夹</h2><h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 NodeJS 自带的文件路径插件</span><br><span class=\"line\">var path = require(&apos;path&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // production 环境</span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    // 使用 config/prod.env.js 中定义的编译环境</span><br><span class=\"line\">    env: require(&apos;./prod.env&apos;),</span><br><span class=\"line\">    // 编译输入的 index.html 文件</span><br><span class=\"line\">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class=\"line\">    // 编译输出的静态资源根路径</span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class=\"line\">    // 编译输出的二级目录</span><br><span class=\"line\">    assetsSubDirectory: &apos;static&apos;,</span><br><span class=\"line\">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class=\"line\">    assetsPublicPath: &apos;./&apos;,</span><br><span class=\"line\">    // 是否开启 cssSourceMap</span><br><span class=\"line\">    productionSourceMap: true,</span><br><span class=\"line\">    // Gzip off by default as many popular static hosts such as</span><br><span class=\"line\">    // Surge or Netlify already gzip all static assets for you.</span><br><span class=\"line\">    // Before setting to `true`, make sure to:</span><br><span class=\"line\">    // npm install --save-dev compression-webpack-plugin</span><br><span class=\"line\">    // 是否开启 gzip,默认不开启</span><br><span class=\"line\">    productionGzip: false,</span><br><span class=\"line\">    // gzip模式下需要压缩的文件的扩展名</span><br><span class=\"line\">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class=\"line\">    // Run the build command with an extra argument to</span><br><span class=\"line\">    // View the bundle analyzer report after build finishes:</span><br><span class=\"line\">    // `npm run build --report`</span><br><span class=\"line\">    // Set to `true` or `false` to always turn it on or off</span><br><span class=\"line\">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // dev 环境</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\">    // 使用 config/dev.env.js 中定义的编译环境</span><br><span class=\"line\">    env: require(&apos;./dev.env&apos;),</span><br><span class=\"line\">    // 运行测试页面的端口</span><br><span class=\"line\">    port: 8087,</span><br><span class=\"line\">    // 启动dev-server之后自动打开浏览器</span><br><span class=\"line\">    autoOpenBrowser: true,</span><br><span class=\"line\">    // 编译输出的二级目录</span><br><span class=\"line\">    assetsSubDirectory: &apos;static&apos;,</span><br><span class=\"line\">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class=\"line\">    assetsPublicPath: &apos;/&apos;,</span><br><span class=\"line\">    // 需要 proxyTable 代理的接口（可跨域）</span><br><span class=\"line\">    proxyTable: &#123;&#125;,</span><br><span class=\"line\">    //静态网址</span><br><span class=\"line\">    /*proxyTable: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 下面的示例将代理请求/api/posts/1到http://jsonplaceholder.typicode.com/posts/1。</span><br><span class=\"line\">      &apos;/api&apos;: &#123;</span><br><span class=\"line\">        target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class=\"line\">        changeOrigin: true,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          &apos;^/api&apos;: &apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\">    //changeOrigin:true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。</span><br><span class=\"line\">    // 除了静态网址之外，您还可以使用glob模式来匹配URL，例如/api/**。有关详细信息，请参阅上下文匹配。</span><br><span class=\"line\">    // 此外，您可以提供一个filter可以是自定义函数的选项，以确定请求是否应被代理：</span><br><span class=\"line\">    /*proxyTable: &#123;</span><br><span class=\"line\">      &apos;*&apos;: &#123;</span><br><span class=\"line\">            target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class=\"line\">            filter: function (pathname, req) &#123;</span><br><span class=\"line\">              return pathname.match(&apos;^/api&apos;) &amp;&amp; req.method === &apos;GET&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">    // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class=\"line\">    // with this option, according to the CSS-Loader README</span><br><span class=\"line\">    // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class=\"line\">    // In our experience, they generally work as expected,</span><br><span class=\"line\">    // just be aware of this issue when enabling this option.</span><br><span class=\"line\">    // 是否开启 cssSourceMap</span><br><span class=\"line\">    cssSourceMap: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件配置了开发和生产两种环境下的配置。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>webpack的使用博大精深，仅仅了解到这里也只是入门。代码可以直接到我的github直接拉取，仓库地址<a href=\"https://github.com/HeyingYe/vue-structural-analysis\" target=\"_blank\" rel=\"noopener\">https://github.com/HeyingYe/vue-structural-analysis</a>。</p>\n"},{"title":"Internet通信（二）","comments":1,"date":"2018-03-02T01:53:11.000Z","updated":"2018-03-02T01:53:11.000Z","description":"上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。","toc":true,"_content":"上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。\n\n我们先对上文做个小结:\n- Internet通信的本质就是计算机A向计算机B发送一个数据包，后者接收再回应一个数据包，依靠传递数据包来完成Internet通信，所以确定计算机地址是Internet通信的前提。\n\n- 在互联网中，计算机地址由IP地址和MAC地址确定，发出方的MAC地址是必然知道的，IP地址则可通过用户设置**静态IP地址**或者通过**DHCP协议**动态确定，接收方的IP地址可通过DNS解析确定，那么我们确定接受方的MAC地址，即可建立Internet通信。\n\n## 接收方MAC地址\n确定接受方MAC地址的情况分两种：发出方和接收方是否在同一子网络中。\n```\n如何判断发出方和接收方是否在同一子网络？\n```\n\n- 判断两台计算机是否在同一网络，需要知道双方的IP地址以及发出方本机的**子网掩码**。\n\n- 将子网掩码和双方的IP地址转为二进制的IP地址，然后将二进制的子网掩码分别与二进制的IP地址做AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果，相同则表示在同一子网络中，否则就不在。\n\n例如发出方的子网掩码为255.255.255.0，两台计算机IP地址分别为172.16.254.2和172.16.254.1，将子网掩码转为二进制为11111111.11111111.11111111.00000000，两台计算机IP地址转为二进制分别为10101100.00010000.11111110.00000010和10101100.00010000.11111110.00000001。两台计算机IP地分别与子网掩码做AND运算，运算结果转为十进制都是172.16.254.0，那么则表示172.16.254.2和172.16.254.1在同一子网络中。\n\n> 在同一子网络\n\n- 在同一子网络中的两台计算机，我们可使用**ARP协议**来确定对方的MAC地址。\n\n- 根据**ARP协议**，发出方将在链接层发出一个ARP数据包（包含在以太网数据包中），该数据包包含本机的IP地址，MAC地址和所要查询的接收方主机IP地址，由于接收方IP地址尚未知道，则在接收方的MAC地址栏填写为FF:FF:FF:FF:FF:FF，表示为一个广播地址。\n\n- 那么发出方所在子网络的每台计算机都会接收到这个数据包，然后从该数据包取出查询的IP地址，与自身的IP地址进行比较，如果相同，则做出响应，返回自身的MAC地址，并将发出方的IP地址和MAC地址映射添加到**本地ARP缓存**中，如果不同，则会丢弃该数据包。\n\n- 发出方接收到接收方的响应后，会将接收方的IP地址和MAC地址映射添加到**本地ARP缓存**中，然后开始建立TCP链接通信。\n\n注：每次查询接收方MAC地址都会在本地ARP缓存中，根据接收方的IP地址寻找相对应的MAC地址，如果没有找到，则会根据ARP协议在以太网进行广播查找。\n\n### 查看ARP缓存表\n打开命令窗口，输入arp -g或者arp -a，查看本地ARP缓存表，如图\n![ARP](img/ARP.jpg)\n- 本地ARP缓存表只缓存与本机在同一子网的MAC地址与IP地址，不在同一子网的就只显示默认网关的MAC地址与IP地址。\n\n- ARP缓存类型为动态是通过ARP协议缓存的IP地址和MAC地址映射关系，缓存时间一般为两分钟，ARP缓存类型为静态则是手动设置或者默认设置的。\n\n\n> 在不同子网络\n\n两台计算机不在同一个子网络，无法直接通过**ARP协议**广播查找，那么只能通过默认网关代为转发，如图。\n![gateway](img/gateway.png)\n\n例如1号计算机与4号计算机请求通信，发送数据包，他将根据1号计算机的子网掩码判断与4号计算机是否在同一子网络中，发现不在同一子网络，于是就把这个数据包发送到网关A（网关A在计算机加入网络中已确定），网关A通过路由协议，根据路由转发表将该数据包转发至网关B，网关B再转发给4号计算机，4号计算机再做出响应，返回本机的MAC地址并添加到本地的ARP缓存。\n\n\n\n\n","source":"_posts/Internet通信（二）.md","raw":"---\ntitle: Internet通信（二）\ncomments: true\ndate: 2018-03-02 09:53:11\nupdated: 2018-03-02 09:53:11\ndescription: 上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。\ntoc: true\ntags:\n - Internet\n\n---\n上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。\n\n我们先对上文做个小结:\n- Internet通信的本质就是计算机A向计算机B发送一个数据包，后者接收再回应一个数据包，依靠传递数据包来完成Internet通信，所以确定计算机地址是Internet通信的前提。\n\n- 在互联网中，计算机地址由IP地址和MAC地址确定，发出方的MAC地址是必然知道的，IP地址则可通过用户设置**静态IP地址**或者通过**DHCP协议**动态确定，接收方的IP地址可通过DNS解析确定，那么我们确定接受方的MAC地址，即可建立Internet通信。\n\n## 接收方MAC地址\n确定接受方MAC地址的情况分两种：发出方和接收方是否在同一子网络中。\n```\n如何判断发出方和接收方是否在同一子网络？\n```\n\n- 判断两台计算机是否在同一网络，需要知道双方的IP地址以及发出方本机的**子网掩码**。\n\n- 将子网掩码和双方的IP地址转为二进制的IP地址，然后将二进制的子网掩码分别与二进制的IP地址做AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果，相同则表示在同一子网络中，否则就不在。\n\n例如发出方的子网掩码为255.255.255.0，两台计算机IP地址分别为172.16.254.2和172.16.254.1，将子网掩码转为二进制为11111111.11111111.11111111.00000000，两台计算机IP地址转为二进制分别为10101100.00010000.11111110.00000010和10101100.00010000.11111110.00000001。两台计算机IP地分别与子网掩码做AND运算，运算结果转为十进制都是172.16.254.0，那么则表示172.16.254.2和172.16.254.1在同一子网络中。\n\n> 在同一子网络\n\n- 在同一子网络中的两台计算机，我们可使用**ARP协议**来确定对方的MAC地址。\n\n- 根据**ARP协议**，发出方将在链接层发出一个ARP数据包（包含在以太网数据包中），该数据包包含本机的IP地址，MAC地址和所要查询的接收方主机IP地址，由于接收方IP地址尚未知道，则在接收方的MAC地址栏填写为FF:FF:FF:FF:FF:FF，表示为一个广播地址。\n\n- 那么发出方所在子网络的每台计算机都会接收到这个数据包，然后从该数据包取出查询的IP地址，与自身的IP地址进行比较，如果相同，则做出响应，返回自身的MAC地址，并将发出方的IP地址和MAC地址映射添加到**本地ARP缓存**中，如果不同，则会丢弃该数据包。\n\n- 发出方接收到接收方的响应后，会将接收方的IP地址和MAC地址映射添加到**本地ARP缓存**中，然后开始建立TCP链接通信。\n\n注：每次查询接收方MAC地址都会在本地ARP缓存中，根据接收方的IP地址寻找相对应的MAC地址，如果没有找到，则会根据ARP协议在以太网进行广播查找。\n\n### 查看ARP缓存表\n打开命令窗口，输入arp -g或者arp -a，查看本地ARP缓存表，如图\n![ARP](img/ARP.jpg)\n- 本地ARP缓存表只缓存与本机在同一子网的MAC地址与IP地址，不在同一子网的就只显示默认网关的MAC地址与IP地址。\n\n- ARP缓存类型为动态是通过ARP协议缓存的IP地址和MAC地址映射关系，缓存时间一般为两分钟，ARP缓存类型为静态则是手动设置或者默认设置的。\n\n\n> 在不同子网络\n\n两台计算机不在同一个子网络，无法直接通过**ARP协议**广播查找，那么只能通过默认网关代为转发，如图。\n![gateway](img/gateway.png)\n\n例如1号计算机与4号计算机请求通信，发送数据包，他将根据1号计算机的子网掩码判断与4号计算机是否在同一子网络中，发现不在同一子网络，于是就把这个数据包发送到网关A（网关A在计算机加入网络中已确定），网关A通过路由协议，根据路由转发表将该数据包转发至网关B，网关B再转发给4号计算机，4号计算机再做出响应，返回本机的MAC地址并添加到本地的ARP缓存。\n\n\n\n\n","slug":"Internet通信（二）","published":1,"layout":"post","photos":[],"link":"","_id":"cjedzfwnw0005pkl1oyc7kue6","content":"<p>上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。</p>\n<p>我们先对上文做个小结:</p>\n<ul>\n<li><p>Internet通信的本质就是计算机A向计算机B发送一个数据包，后者接收再回应一个数据包，依靠传递数据包来完成Internet通信，所以确定计算机地址是Internet通信的前提。</p>\n</li>\n<li><p>在互联网中，计算机地址由IP地址和MAC地址确定，发出方的MAC地址是必然知道的，IP地址则可通过用户设置<strong>静态IP地址</strong>或者通过<strong>DHCP协议</strong>动态确定，接收方的IP地址可通过DNS解析确定，那么我们确定接受方的MAC地址，即可建立Internet通信。</p>\n</li>\n</ul>\n<h2 id=\"接收方MAC地址\"><a href=\"/2018/03/02/Internet通信（二）/#接收方MAC地址\" class=\"headerlink\" title=\"接收方MAC地址\"></a>接收方MAC地址</h2><p>确定接受方MAC地址的情况分两种：发出方和接收方是否在同一子网络中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何判断发出方和接收方是否在同一子网络？</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判断两台计算机是否在同一网络，需要知道双方的IP地址以及发出方本机的<strong>子网掩码</strong>。</p>\n</li>\n<li><p>将子网掩码和双方的IP地址转为二进制的IP地址，然后将二进制的子网掩码分别与二进制的IP地址做AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果，相同则表示在同一子网络中，否则就不在。</p>\n</li>\n</ul>\n<p>例如发出方的子网掩码为255.255.255.0，两台计算机IP地址分别为172.16.254.2和172.16.254.1，将子网掩码转为二进制为11111111.11111111.11111111.00000000，两台计算机IP地址转为二进制分别为10101100.00010000.11111110.00000010和10101100.00010000.11111110.00000001。两台计算机IP地分别与子网掩码做AND运算，运算结果转为十进制都是172.16.254.0，那么则表示172.16.254.2和172.16.254.1在同一子网络中。</p>\n<blockquote>\n<p>在同一子网络</p>\n</blockquote>\n<ul>\n<li><p>在同一子网络中的两台计算机，我们可使用<strong>ARP协议</strong>来确定对方的MAC地址。</p>\n</li>\n<li><p>根据<strong>ARP协议</strong>，发出方将在链接层发出一个ARP数据包（包含在以太网数据包中），该数据包包含本机的IP地址，MAC地址和所要查询的接收方主机IP地址，由于接收方IP地址尚未知道，则在接收方的MAC地址栏填写为FF:FF:FF:FF:FF:FF，表示为一个广播地址。</p>\n</li>\n<li><p>那么发出方所在子网络的每台计算机都会接收到这个数据包，然后从该数据包取出查询的IP地址，与自身的IP地址进行比较，如果相同，则做出响应，返回自身的MAC地址，并将发出方的IP地址和MAC地址映射添加到<strong>本地ARP缓存</strong>中，如果不同，则会丢弃该数据包。</p>\n</li>\n<li><p>发出方接收到接收方的响应后，会将接收方的IP地址和MAC地址映射添加到<strong>本地ARP缓存</strong>中，然后开始建立TCP链接通信。</p>\n</li>\n</ul>\n<p>注：每次查询接收方MAC地址都会在本地ARP缓存中，根据接收方的IP地址寻找相对应的MAC地址，如果没有找到，则会根据ARP协议在以太网进行广播查找。</p>\n<h3 id=\"查看ARP缓存表\"><a href=\"/2018/03/02/Internet通信（二）/#查看ARP缓存表\" class=\"headerlink\" title=\"查看ARP缓存表\"></a>查看ARP缓存表</h3><p>打开命令窗口，输入arp -g或者arp -a，查看本地ARP缓存表，如图<br><img src=\"/2018/03/02/Internet通信（二）/img/ARP.jpg\" alt=\"ARP\"></p>\n<ul>\n<li><p>本地ARP缓存表只缓存与本机在同一子网的MAC地址与IP地址，不在同一子网的就只显示默认网关的MAC地址与IP地址。</p>\n</li>\n<li><p>ARP缓存类型为动态是通过ARP协议缓存的IP地址和MAC地址映射关系，缓存时间一般为两分钟，ARP缓存类型为静态则是手动设置或者默认设置的。</p>\n</li>\n</ul>\n<blockquote>\n<p>在不同子网络</p>\n</blockquote>\n<p>两台计算机不在同一个子网络，无法直接通过<strong>ARP协议</strong>广播查找，那么只能通过默认网关代为转发，如图。<br><img src=\"/2018/03/02/Internet通信（二）/img/gateway.png\" alt=\"gateway\"></p>\n<p>例如1号计算机与4号计算机请求通信，发送数据包，他将根据1号计算机的子网掩码判断与4号计算机是否在同一子网络中，发现不在同一子网络，于是就把这个数据包发送到网关A（网关A在计算机加入网络中已确定），网关A通过路由协议，根据路由转发表将该数据包转发至网关B，网关B再转发给4号计算机，4号计算机再做出响应，返回本机的MAC地址并添加到本地的ARP缓存。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上文介绍了计算机网络的基础知识和DNS域名解析，本文继续分析DNS域名解析确定接收方的IP地址后如何确定MAC地址，然后建立TCP链接。</p>\n<p>我们先对上文做个小结:</p>\n<ul>\n<li><p>Internet通信的本质就是计算机A向计算机B发送一个数据包，后者接收再回应一个数据包，依靠传递数据包来完成Internet通信，所以确定计算机地址是Internet通信的前提。</p>\n</li>\n<li><p>在互联网中，计算机地址由IP地址和MAC地址确定，发出方的MAC地址是必然知道的，IP地址则可通过用户设置<strong>静态IP地址</strong>或者通过<strong>DHCP协议</strong>动态确定，接收方的IP地址可通过DNS解析确定，那么我们确定接受方的MAC地址，即可建立Internet通信。</p>\n</li>\n</ul>\n<h2 id=\"接收方MAC地址\"><a href=\"#接收方MAC地址\" class=\"headerlink\" title=\"接收方MAC地址\"></a>接收方MAC地址</h2><p>确定接受方MAC地址的情况分两种：发出方和接收方是否在同一子网络中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何判断发出方和接收方是否在同一子网络？</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判断两台计算机是否在同一网络，需要知道双方的IP地址以及发出方本机的<strong>子网掩码</strong>。</p>\n</li>\n<li><p>将子网掩码和双方的IP地址转为二进制的IP地址，然后将二进制的子网掩码分别与二进制的IP地址做AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果，相同则表示在同一子网络中，否则就不在。</p>\n</li>\n</ul>\n<p>例如发出方的子网掩码为255.255.255.0，两台计算机IP地址分别为172.16.254.2和172.16.254.1，将子网掩码转为二进制为11111111.11111111.11111111.00000000，两台计算机IP地址转为二进制分别为10101100.00010000.11111110.00000010和10101100.00010000.11111110.00000001。两台计算机IP地分别与子网掩码做AND运算，运算结果转为十进制都是172.16.254.0，那么则表示172.16.254.2和172.16.254.1在同一子网络中。</p>\n<blockquote>\n<p>在同一子网络</p>\n</blockquote>\n<ul>\n<li><p>在同一子网络中的两台计算机，我们可使用<strong>ARP协议</strong>来确定对方的MAC地址。</p>\n</li>\n<li><p>根据<strong>ARP协议</strong>，发出方将在链接层发出一个ARP数据包（包含在以太网数据包中），该数据包包含本机的IP地址，MAC地址和所要查询的接收方主机IP地址，由于接收方IP地址尚未知道，则在接收方的MAC地址栏填写为FF:FF:FF:FF:FF:FF，表示为一个广播地址。</p>\n</li>\n<li><p>那么发出方所在子网络的每台计算机都会接收到这个数据包，然后从该数据包取出查询的IP地址，与自身的IP地址进行比较，如果相同，则做出响应，返回自身的MAC地址，并将发出方的IP地址和MAC地址映射添加到<strong>本地ARP缓存</strong>中，如果不同，则会丢弃该数据包。</p>\n</li>\n<li><p>发出方接收到接收方的响应后，会将接收方的IP地址和MAC地址映射添加到<strong>本地ARP缓存</strong>中，然后开始建立TCP链接通信。</p>\n</li>\n</ul>\n<p>注：每次查询接收方MAC地址都会在本地ARP缓存中，根据接收方的IP地址寻找相对应的MAC地址，如果没有找到，则会根据ARP协议在以太网进行广播查找。</p>\n<h3 id=\"查看ARP缓存表\"><a href=\"#查看ARP缓存表\" class=\"headerlink\" title=\"查看ARP缓存表\"></a>查看ARP缓存表</h3><p>打开命令窗口，输入arp -g或者arp -a，查看本地ARP缓存表，如图<br><img src=\"img/ARP.jpg\" alt=\"ARP\"></p>\n<ul>\n<li><p>本地ARP缓存表只缓存与本机在同一子网的MAC地址与IP地址，不在同一子网的就只显示默认网关的MAC地址与IP地址。</p>\n</li>\n<li><p>ARP缓存类型为动态是通过ARP协议缓存的IP地址和MAC地址映射关系，缓存时间一般为两分钟，ARP缓存类型为静态则是手动设置或者默认设置的。</p>\n</li>\n</ul>\n<blockquote>\n<p>在不同子网络</p>\n</blockquote>\n<p>两台计算机不在同一个子网络，无法直接通过<strong>ARP协议</strong>广播查找，那么只能通过默认网关代为转发，如图。<br><img src=\"img/gateway.png\" alt=\"gateway\"></p>\n<p>例如1号计算机与4号计算机请求通信，发送数据包，他将根据1号计算机的子网掩码判断与4号计算机是否在同一子网络中，发现不在同一子网络，于是就把这个数据包发送到网关A（网关A在计算机加入网络中已确定），网关A通过路由协议，根据路由转发表将该数据包转发至网关B，网关B再转发给4号计算机，4号计算机再做出响应，返回本机的MAC地址并添加到本地的ARP缓存。</p>\n"}],"PostAsset":[{"_id":"source/_drafts/http-cache/img/request.jpg","slug":"img\\request.jpg","post":"cjedzfwnn0002pkl15fbmxkq4","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/dynamicIP.png","slug":"img\\dynamicIP.png","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/mac.jpg","slug":"img\\mac.jpg","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/internet.png","slug":"img\\internet.png","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/staticIP.png","slug":"img\\staticIP.png","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/url.png","slug":"img\\url.png","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信（二）/img/ARP.jpg","slug":"img\\ARP.jpg","post":"cjedzfwnw0005pkl1oyc7kue6","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信（二）/img/gateway.png","slug":"img\\gateway.png","post":"cjedzfwnw0005pkl1oyc7kue6","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/detail.jpg","slug":"img\\detail.jpg","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0},{"_id":"source/_posts/vue-cli构建Vue项目结构分析/img/project.png","slug":"img\\project.png","post":"cjedzfwnu0004pkl1ya3qtttz","modified":0,"renderable":0},{"_id":"source/_posts/Internet通信(一)/img/dns.png","slug":"img\\dns.png","post":"cjedzfwnb0000pkl1mz96zj8i","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjedzfwnw0005pkl1oyc7kue6","tag_id":"cjedzfwns0003pkl1otqsag0c","_id":"cjedzfwo00007pkl1x193i7xs"},{"post_id":"cjedzfwnb0000pkl1mz96zj8i","tag_id":"cjedzfwns0003pkl1otqsag0c","_id":"cjedzfwod0009pkl105fl2hqd"},{"post_id":"cjedzfwnb0000pkl1mz96zj8i","tag_id":"cjedzfwnz0006pkl1daaq2oyt","_id":"cjedzfwoi000apkl1i3vt2nte"},{"post_id":"cjedzfwnn0002pkl15fbmxkq4","tag_id":"cjedzfwo50008pkl11c189znl","_id":"cjedzfwpb000cpkl1k15a8a5b"},{"post_id":"cjedzfwnu0004pkl1ya3qtttz","tag_id":"cjedzfwol000bpkl1qa2ifd2i","_id":"cjedzfwpi000dpkl1je7dq1x9"}],"Tag":[{"name":"Internet","_id":"cjedzfwns0003pkl1otqsag0c"},{"name":"计算机网络基础","_id":"cjedzfwnz0006pkl1daaq2oyt"},{"name":"http","_id":"cjedzfwo50008pkl11c189znl"},{"name":"vue","_id":"cjedzfwol000bpkl1qa2ifd2i"}]}}