<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Internet通信(一)]]></title>
      <url>/2018/02/27/Internet%E9%80%9A%E4%BF%A1(%E4%B8%80)/</url>
      <content type="html"></content>
      
        
        <tags>
            
            <tag> Internet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli]]></title>
      <url>/2018/02/10/vue-cli/</url>
      <content type="html"><![CDATA[<h2 id="构建项目"><a href="/2018/02/10/vue-cli/#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>使用vue-cli脚手架搭建vue项目的具体步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">cd E:(跳转到项目目录)</span><br><span class="line">vue init webpack vueproject (vueproject 为项目目录名称，可行更改)</span><br><span class="line">cd vueproject</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p>
<h2 id="项目结构分析"><a href="/2018/02/10/vue-cli/#项目结构分析" class="headerlink" title="项目结构分析"></a>项目结构分析</h2><p><img src="/2018/02/10/vue-cli/img/project.png" alt="项目结构"></p>
<h2 id="package-json"><a href="/2018/02/10/vue-cli/#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>抽取package.json文件重要部分分析</p>
<blockquote>
<p>scripts字段</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;node build/build.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>项目开发周期主要执行的两个任务分别是开发环境<code>npm run dev</code>和打包任务<code>npm run build</code>,script字段是用来指定npm相关命令的缩写的,即相当于在node环境下执行build/dev-server.js和node build/build.js文件。</p>
<hr>
<blockquote>
<p>dependencies和devDependencies字段</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.3.3&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^2.6.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.22.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dependencies字段指定了项目运行时所依赖的模块，devDependencies字段指定了项目开发时所依赖的模块。项目开发应使用命令管理package.json文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save vue              \\自动写入package.json文件的dependencies字段；</span><br><span class="line">npm i --save-dev babel-core \\自动写入package.json文件的devDependencies字段；</span><br></pre></td></tr></table></figure></p>
<p>注：i为install的缩写</p>
<hr>
<blockquote>
<p>engine和browserslist字段</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">  &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,</span><br><span class="line">  &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">  &quot;&gt; 1%&quot;,</span><br><span class="line">  &quot;last 2 versions&quot;,</span><br><span class="line">  &quot;not ie &lt;= 8&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>engines字段表示项目运行所依赖的node以及npm版本号，browserslist表示项目的浏览器支持情况，具体详情可以查看<a href="https://www.npmjs.com/package/browserslist" target="_blank" rel="noopener">https://www.npmjs.com/package/browserslist</a>。</p>
<h2 id="build文件夹"><a href="/2018/02/10/vue-cli/#build文件夹" class="headerlink" title="build文件夹"></a>build文件夹</h2><h3 id="dev-server-js"><a href="/2018/02/10/vue-cli/#dev-server-js" class="headerlink" title="dev-server.js"></a>dev-server.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">// 检查 Node 和 npm 版本</span><br><span class="line">require(&apos;./check-versions&apos;)()</span><br><span class="line">//使用了 config/index.js</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">// 如果 Node 的环境无法判断当前是 dev / product 环境</span><br><span class="line">if (!process.env.NODE_ENV) &#123;</span><br><span class="line">// 使用 config.dev.env.NODE_ENV 作为当前的环境</span><br><span class="line">  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)</span><br><span class="line">&#125;</span><br><span class="line">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span><br><span class="line">//(可以调用默认软件打开网址、图片、文件等内容的插件,</span><br><span class="line">//这里用它来调用默认浏览器打开dev-server监听的端口，例如：localhost:8080)</span><br><span class="line">var opn = require(&apos;opn&apos;)</span><br><span class="line">// 使用 NodeJS 自带的文件路径工具</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">// 使用 express</span><br><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">// 使用 webpack</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">// http-proxy可以实现转发所有请求代理到后端真实API地址，以实现前后端开发完全分离</span><br><span class="line">// 在config/index.js中可以对proxyTable想进行配置</span><br><span class="line">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</span><br><span class="line">// 根据 Node 环境来引入相应的 webpack 配置</span><br><span class="line">var webpackConfig = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class="line">  ? require(&apos;./webpack.prod.conf&apos;)</span><br><span class="line">  : require(&apos;./webpack.dev.conf&apos;)</span><br><span class="line"></span><br><span class="line">// default port where dev server listens for incoming traffic</span><br><span class="line">// 如果没有指定运行端口，使用 config.dev.port 作为运行端口</span><br><span class="line">var port = process.env.PORT || config.dev.port</span><br><span class="line">// automatically open browser, if not set will be false</span><br><span class="line">// 用于判断是否要自动打开浏览器的布尔变量，当配置文件中没有设置自动打开浏览器的时候其值为 false</span><br><span class="line">var autoOpenBrowser = !!config.dev.autoOpenBrowser</span><br><span class="line"></span><br><span class="line">// Define HTTP proxies to your custom API backend</span><br><span class="line">// https://github.com/chimurai/http-proxy-middleware</span><br><span class="line">// 定义 HTTP 代理表，代理到 API 服务器</span><br><span class="line">// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置</span><br><span class="line">var proxyTable = config.dev.proxyTable</span><br><span class="line">// 使用 express 启动一个服务</span><br><span class="line">var app = express()</span><br><span class="line">// 启动 webpack 进行编译</span><br><span class="line">var compiler = webpack(webpackConfig)</span><br><span class="line">// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中</span><br><span class="line">//(webpack-dev-middleware使用compiler对象来对相应的文件进行编译和绑定</span><br><span class="line">// 编译绑定后将得到的产物存放在内存中而没有写进磁盘</span><br><span class="line">// 将这个中间件交给express使用之后即可访问这些编译后的产品文件)</span><br><span class="line">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</span><br><span class="line">  publicPath: webpackConfig.output.publicPath,</span><br><span class="line">  quiet: true</span><br><span class="line">&#125;)</span><br><span class="line">// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload用于实现热重载功能的中间件</span><br><span class="line">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler, &#123;</span><br><span class="line">  log: () =&gt; &#123;&#125;,</span><br><span class="line">  heartbeat: 2000</span><br><span class="line">&#125;)</span><br><span class="line">// force page reload when html-webpack-plugin template changes</span><br><span class="line">// 当html-webpack-plugin提交之后通过热重载中间件发布重载动作使得页面重载</span><br><span class="line">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</span><br><span class="line">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</span><br><span class="line">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</span><br><span class="line">    cb()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// proxy api requests</span><br><span class="line">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span><br><span class="line">//Object.keys()返回对象的键名数组</span><br><span class="line">Object.keys(proxyTable).forEach(function (context) &#123;</span><br><span class="line">  var options = proxyTable[context]</span><br><span class="line">  if (typeof options === &apos;string&apos;) &#123;</span><br><span class="line">    options = &#123; target: options &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  app.use(proxyMiddleware(options.filter || context, options))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// handle fallback for HTML5 history API</span><br><span class="line">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址，常用于SPA</span><br><span class="line">app.use(require(&apos;connect-history-api-fallback&apos;)())</span><br><span class="line"></span><br><span class="line">// serve webpack bundle output</span><br><span class="line">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"></span><br><span class="line">// enable hot-reload and state-preserving</span><br><span class="line">// compilation error display</span><br><span class="line">// 将热重载中间件(Hot-reload)挂在到express服务器上</span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"></span><br><span class="line">// serve pure static assets</span><br><span class="line">// 拼接 static 文件夹的静态资源路径</span><br><span class="line">var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class="line">// 为静态资源提供响应服务</span><br><span class="line">app.use(staticPath, express.static(&apos;./static&apos;))</span><br><span class="line">// 应用的地址信息，例如：http://localhost:8080</span><br><span class="line">var uri = &apos;http://localhost:&apos; + port</span><br><span class="line"></span><br><span class="line">var _resolve</span><br><span class="line">var readyPromise = new Promise(resolve =&gt; &#123;</span><br><span class="line">  _resolve = resolve</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&apos;&gt; Starting dev server...&apos;)</span><br><span class="line"></span><br><span class="line">// webpack开发中间件合法（valid）之后输出提示语到控制台，表明服务器已启动</span><br><span class="line">devMiddleware.waitUntilValid(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;&gt; Listening at &apos; + uri + &apos;\n&apos;)</span><br><span class="line">  // when env is testing, don&apos;t need open it</span><br><span class="line">  // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span><br><span class="line">  if (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== &apos;testing&apos;) &#123;</span><br><span class="line">    opn(uri)</span><br><span class="line">  &#125;</span><br><span class="line">  _resolve()</span><br><span class="line">&#125;)</span><br><span class="line">//监听服务器端口</span><br><span class="line">var server = app.listen(port)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  ready: readyPromise,</span><br><span class="line">  close: () =&gt; &#123;</span><br><span class="line">    server.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文件主要完成以下事情：</p>
<p>1.检查node和npm的版本。</p>
<p>2.引入相关插件和配置。</p>
<p>3.创建express服务器和webpack编译器。</p>
<p>4.配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）。</p>
<p>5.挂载代理服务和中间件。</p>
<p>6.配置静态资源。</p>
<p>7.启动服务器监听特定端口（8080）。</p>
<p>8.自动打开浏览器并打开特定网址（localhost:8080）。</p>
<p>注：express服务器提供静态文件服务，不过它可以使用了http-proxy-middleware,一个http请求代理的中间件。前端开发过程中需要使用到后台的API的话，可以通过配置proxyTable来将相应的后台请求代理到专用的API服务器。</p>
<hr>
<h3 id="build-js"><a href="/2018/02/10/vue-cli/#build-js" class="headerlink" title="build.js"></a>build.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 检查 Node 和 npm 版本</span><br><span class="line">require(&apos;./check-versions&apos;)()</span><br><span class="line">//生产环境</span><br><span class="line">process.env.NODE_ENV = &apos;production&apos;</span><br><span class="line">// 一个很好看的 loading 插件</span><br><span class="line">var ora = require(&apos;ora&apos;)</span><br><span class="line">var rm = require(&apos;rimraf&apos;)</span><br><span class="line">// 使用 NodeJS 自带的文件路径插件</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">// 用于在控制台输出带颜色字体的插件</span><br><span class="line">var chalk = require(&apos;chalk&apos;)</span><br><span class="line">//加载webpack</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">//加载config中index.js</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">//加载webpack.prod.conf</span><br><span class="line">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</span><br><span class="line"></span><br><span class="line">var spinner = ora(&apos;building for production...&apos;)</span><br><span class="line">spinner.start()// 开启loading动画</span><br><span class="line">// 拼接编译输出文件路径</span><br><span class="line">var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory);</span><br><span class="line">// 删除这个文件夹 （递归删除）</span><br><span class="line">rm(assetsPath, err =&gt; &#123;</span><br><span class="line">  if (err) throw err</span><br><span class="line">    //  开始 webpack 的编译</span><br><span class="line">  webpack(webpackConfig, function (err, stats) &#123;</span><br><span class="line">    // 编译成功的回调函数</span><br><span class="line">    spinner.stop()</span><br><span class="line">    if (err) throw err</span><br><span class="line">    process.stdout.write(stats.toString(&#123;</span><br><span class="line">      colors: true,</span><br><span class="line">      modules: false,</span><br><span class="line">      children: false,</span><br><span class="line">      chunks: false,</span><br><span class="line">      chunkModules: false</span><br><span class="line">    &#125;) + &apos;\n\n&apos;)</span><br><span class="line"></span><br><span class="line">    console.log(chalk.cyan(&apos;  Build complete.\n&apos;))</span><br><span class="line">    console.log(chalk.yellow(</span><br><span class="line">      &apos;  Tip: built files are meant to be served over an HTTP server.\n&apos; +</span><br><span class="line">      &apos;  Opening index.html over file:// won\&apos;t work.\n&apos;</span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>build.js主要作用为：</p>
<p>1.显示打包loading动画。</p>
<p>2.删除并创建目标文件夹。</p>
<p>3.webpack编译源文件。</p>
<p>4.输出打包后的文件。</p>
<p>注：webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。</p>
<hr>
<h3 id="check-versions-js"><a href="/2018/02/10/vue-cli/#check-versions-js" class="headerlink" title="check-versions.js"></a>check-versions.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 用于在控制台输出带颜色字体的插件</span><br><span class="line">var chalk = require(&apos;chalk&apos;)</span><br><span class="line">// 语义化版本检查插件</span><br><span class="line">var semver = require(&apos;semver&apos;)</span><br><span class="line">// 引入package.json</span><br><span class="line">var packageConfig = require(&apos;../package.json&apos;)</span><br><span class="line">var shell = require(&apos;shelljs&apos;)</span><br><span class="line">// 开辟子进程执行指令cmd并返回结果</span><br><span class="line">function exec (cmd) &#123;</span><br><span class="line">  return require(&apos;child_process&apos;).execSync(cmd).toString().trim()</span><br><span class="line">&#125;</span><br><span class="line">// node和npm版本需求</span><br><span class="line">var versionRequirements = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: &apos;node&apos;,</span><br><span class="line">    currentVersion: semver.clean(process.version),</span><br><span class="line">    versionRequirement: packageConfig.engines.node</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">if (shell.which(&apos;npm&apos;)) &#123;</span><br><span class="line">  versionRequirements.push(&#123;</span><br><span class="line">    name: &apos;npm&apos;,</span><br><span class="line">    currentVersion: exec(&apos;npm --version&apos;),</span><br><span class="line">    versionRequirement: packageConfig.engines.npm</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = function () &#123;</span><br><span class="line">  var warnings = []</span><br><span class="line">  // 依次判断版本是否符合要求</span><br><span class="line">  for (var i = 0; i &lt; versionRequirements.length; i++) &#123;</span><br><span class="line">    var mod = versionRequirements[i]</span><br><span class="line">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class="line">      warnings.push(mod.name + &apos;: &apos; +</span><br><span class="line">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</span><br><span class="line">        chalk.green(mod.versionRequirement)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 如果有警告则将其输出到控制台</span><br><span class="line">  if (warnings.length) &#123;</span><br><span class="line">    console.log(chalk.yellow(&apos;To use this template, you must update following to modules:&apos;))</span><br><span class="line">    for (var i = 0; i &lt; warnings.length; i++) &#123;</span><br><span class="line">      var warning = warnings[i]</span><br><span class="line">      console.log(&apos;  &apos; + warning)</span><br><span class="line">    &#125;</span><br><span class="line">    process.exit(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文件主要是用来检测当前环境中的node和npm版本和我们需要的是否一致的。</p>
<hr>
<h3 id="webpack-base-conf-js"><a href="/2018/02/10/vue-cli/#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">// 使用 NodeJS 自带的文件路径插件</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">// 引入一些小工具</span><br><span class="line">var utils = require(&apos;./utils&apos;)</span><br><span class="line">// 引入 config/index.js</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">var vueLoaderConfig = require(&apos;./vue-loader.conf&apos;)</span><br><span class="line"></span><br><span class="line">// 拼接我们的工作区路径为一个绝对路径</span><br><span class="line">function resolve (dir) &#123;</span><br><span class="line">  return path.join(__dirname, &apos;..&apos;, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 配置webpack编译入口</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &apos;./src/main.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 配置webpack输出路径和命名规则</span><br><span class="line">  output: &#123;</span><br><span class="line">    // webpack输出的目标文件夹路径（例如：/dist）</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    // webpack输出bundle文件命名格式</span><br><span class="line">    filename: &apos;[name].js&apos;,</span><br><span class="line">    // 正式发布环境下webpack编译输出的发布路径</span><br><span class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos;</span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 自动补全的扩展名</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    // 路径代理,创建路径别名，有了别名之后引用模块更方便</span><br><span class="line">    // 例如:import Vue from &apos;vue/dist/vue.common.js&apos;可以写成 import Vue from &apos;vue&apos;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 配置不同类型模块的处理规则</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 对src和test文件夹下的.js和.vue文件使用eslint-loader</span><br><span class="line">        test: /\.(js|vue)$/,</span><br><span class="line">        loader: &apos;eslint-loader&apos;,</span><br><span class="line">        enforce: &apos;pre&apos;,</span><br><span class="line">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</span><br><span class="line">        options: &#123;</span><br><span class="line">          formatter: require(&apos;eslint-friendly-formatter&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // 对所有.vue文件使用vue-loader</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: &apos;vue-loader&apos;,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // 对src和test文件夹下的.js文件使用babel-loader</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;babel-loader&apos;,</span><br><span class="line">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // 对图片资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class="line">        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        // 对字体资源文件使用url-loader，query.name指明了输出的命名规则</span><br><span class="line">        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;media/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;fonts/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack.base.conf.js主要完成了下面这些事情：</p>
<p>1.配置webpack编译入口</p>
<p>2.配置webpack输出路径和命名规则</p>
<p>3.配置模块resolve规则</p>
<p>4.配置不同类型模块的处理规则</p>
<p>注：这个配置里面只配置了.js、.vue、图片、字体等文件的处理规则，如果需要处理其他文件可以在module.rules里面配置。</p>
<hr>
<h3 id="webpack-dev-conf-js"><a href="/2018/02/10/vue-cli/#webpack-dev-conf-js" class="headerlink" title="webpack.dev.conf.js"></a>webpack.dev.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 使用一些小工具</span><br><span class="line">var utils = require(&apos;./utils&apos;)</span><br><span class="line">// 使用 webpack</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">// 同样的使用了 config/index.js</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">// 使用 webpack 配置合并插件,可以合并数组和对象</span><br><span class="line">var merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">// 加载 webpack.base.conf，webpack基础配置</span><br><span class="line">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class="line">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class="line">//(自动注入依赖文件（link/script）的webpack插件)</span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">// 用于更友好地输出webpack的警告、错误等信息</span><br><span class="line">var FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">// add hot-reload related code to entry chunks</span><br><span class="line">// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前，指定入口js文件</span><br><span class="line">Object.keys(baseWebpackConfig.entry).forEach(function (name) &#123;</span><br><span class="line">  baseWebpackConfig.entry[name] = [&apos;./build/dev-client&apos;].concat(baseWebpackConfig.entry[name])</span><br><span class="line">&#125;)</span><br><span class="line">// 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并</span><br><span class="line">module.exports = merge(baseWebpackConfig, &#123;</span><br><span class="line">  // 配置样式文件的处理规则，使用styleLoaders</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // cheap-module-eval-source-map is faster for development</span><br><span class="line">   // 配置Source Maps。使用 #cheap-module-eval-source-map 模式作为开发工具，在开发中使用cheap-module-eval-source-map更快</span><br><span class="line">  devtool: &apos;#cheap-module-eval-source-map&apos;,</span><br><span class="line"></span><br><span class="line">  // 配置webpack插件</span><br><span class="line">  plugins: [</span><br><span class="line">    // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env&apos;: config.dev.env</span><br><span class="line">    &#125;),</span><br><span class="line">    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span><br><span class="line">    // HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">     // 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错</span><br><span class="line">    new webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">    // https://github.com/ampedandwired/html-webpack-plugin</span><br><span class="line">    // 将 index.html 作为入口，注入 html 代码后生成 index.html文件</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: &apos;index.html&apos;,</span><br><span class="line">      template: &apos;index.html&apos;,</span><br><span class="line">      inject: true</span><br><span class="line">    &#125;),</span><br><span class="line">    new FriendlyErrorsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>该文件主要完成以下事情：</p>
<p>1.将hot-reload相关的代码添加到entry chunks。</p>
<p>2.合并基础的webpack配置。</p>
<p>3.使用styleLoaders。</p>
<p>4.配置Source Maps。</p>
<p>5.配置webpack插件。</p>
<hr>
<h3 id="webpack-prod-conf-js"><a href="/2018/02/10/vue-cli/#webpack-prod-conf-js" class="headerlink" title="webpack.prod.conf.js"></a>webpack.prod.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">// 使用 NodeJS 自带的文件路径插件</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">// 使用一些小工具</span><br><span class="line">var utils = require(&apos;./utils&apos;)</span><br><span class="line">// 加载 webpack</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">// 加载 confi.index.js</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">// 加载 webpack 配置合并工具</span><br><span class="line">var merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">// 加载 webpack.base.conf.js</span><br><span class="line">var baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class="line">//使用copy-webpack-plugin插件</span><br><span class="line">var CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class="line">// 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中</span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">// 用于从webpack生成的bundle中提取文本到特定文件中的插件</span><br><span class="line">// 可以抽取出css，js文件将其与webpack输出的bundle分离</span><br><span class="line">var ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//使用js,css压缩插件</span><br><span class="line">var OptimizeCSSPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//判断当前环境是否为测试环境，如是加载测试环境配置文件，否则使用config.build.env</span><br><span class="line">var env = process.env.NODE_ENV === &apos;testing&apos;</span><br><span class="line">  ? require(&apos;../config/test.env&apos;)</span><br><span class="line">  : config.build.env</span><br><span class="line">// 合并 webpack.base.conf.js</span><br><span class="line">var webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    // 使用的 loader</span><br><span class="line">    rules: utils.styleLoaders(&#123;</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      extract: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 是否使用 #source-map 开发工具</span><br><span class="line">  devtool: config.build.productionSourceMap ? &apos;#source-map&apos; : false,</span><br><span class="line">  output: &#123;</span><br><span class="line">    // 编译输出目录</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    // 编译输出文件名</span><br><span class="line">    // 我们可以在 hash 后加 :6 决定使用几位 hash 值</span><br><span class="line">    filename: utils.assetsPath(&apos;js/[name].[chunkhash].js&apos;),</span><br><span class="line">    // 没有指定输出名的文件输出的文件名</span><br><span class="line">    chunkFilename: utils.assetsPath(&apos;js/[id].[chunkhash].js&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 使用的插件</span><br><span class="line">  plugins: [</span><br><span class="line">    // http://vuejs.github.io/vue-loader/en/workflow/production.html</span><br><span class="line">     // definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env&apos;: env</span><br><span class="line">    &#125;),</span><br><span class="line">    // 压缩 js (同样可以压缩 css)</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: false</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: true</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract css into its own file</span><br><span class="line">    // 将 css 文件分离出来</span><br><span class="line">    new ExtractTextPlugin(&#123;</span><br><span class="line">      filename: utils.assetsPath(&apos;css/[name].[contenthash].css&apos;)</span><br><span class="line">    &#125;),</span><br><span class="line">    // Compress extracted CSS. We are using this plugin so that possible</span><br><span class="line">    // duplicated CSS from different components can be deduped.</span><br><span class="line">    new OptimizeCSSPlugin(&#123;</span><br><span class="line">      cssProcessorOptions: &#123;</span><br><span class="line">        safe: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    // generate dist index.html with correct asset hash for caching.</span><br><span class="line">    // you can customize output by editing /index.html</span><br><span class="line">    // see https://github.com/ampedandwired/html-webpack-plugin</span><br><span class="line">    // 输入输出的 .html 文件</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: process.env.NODE_ENV === &apos;testing&apos;</span><br><span class="line">        ? &apos;index.html&apos;</span><br><span class="line">        : config.build.index,</span><br><span class="line">      template: &apos;index.html&apos;,</span><br><span class="line">      // 是否注入 html</span><br><span class="line">      inject: true,</span><br><span class="line">      // 压缩的方式</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: true,</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeAttributeQuotes: true</span><br><span class="line">        // more options:</span><br><span class="line">        // https://github.com/kangax/html-minifier#options-quick-reference</span><br><span class="line">      &#125;,</span><br><span class="line">      // necessary to consistently work with multiple chunks via CommonsChunkPlugin</span><br><span class="line">      chunksSortMode: &apos;dependency&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    // split vendor js into its own file</span><br><span class="line">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;vendor&apos;,</span><br><span class="line">      minChunks: function (module, count) &#123;</span><br><span class="line">        // any required modules inside node_modules are extracted to vendor</span><br><span class="line">        return (</span><br><span class="line">          module.resource &amp;&amp;</span><br><span class="line">          /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">          module.resource.indexOf(</span><br><span class="line">            path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class="line">          ) === 0</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract webpack runtime and module manifest to its own file in order to</span><br><span class="line">    // prevent vendor hash from being updated whenever app bundle is updated</span><br><span class="line">    // 没有指定输出文件名的文件输出的静态文件名</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;manifest&apos;,</span><br><span class="line">      chunks: [&apos;vendor&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line">    // copy custom static assets</span><br><span class="line">    new CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        from: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class="line">        to: config.build.assetsSubDirectory,</span><br><span class="line">        ignore: [&apos;.*&apos;]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">// 开启 gzip 的情况下使用下方的配置,引入compression插件进行压缩</span><br><span class="line">if (config.build.productionGzip) &#123;</span><br><span class="line">  var CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;)</span><br><span class="line"> // 加载 compression-webpack-plugin 插件</span><br><span class="line"> var reProductionGzipExtensions = &apos;\\.(&apos; +</span><br><span class="line">        config.build.productionGzipExtensions.join(&apos;|&apos;) +</span><br><span class="line">        &apos;)$&apos;;</span><br><span class="line">  // 使用 compression-webpack-plugin 插件进行压缩</span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    new CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: &apos;[path].gz[query]&apos;,</span><br><span class="line">      algorithm: &apos;gzip&apos;,</span><br><span class="line">      test: new RegExp(reProductionGzipExtensions),</span><br><span class="line">      threshold: 10240,</span><br><span class="line">      minRatio: 0.8</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">  var BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br><span class="line">  webpackConfig.plugins.push(new BundleAnalyzerPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = webpackConfig</span><br></pre></td></tr></table></figure>
<p>该文件主要用处：</p>
<p>1.合并基础的webpack.base.conf.js文件配置。</p>
<p>2.使用styleLoaders。</p>
<p>3.配置webpack的输出路径。</p>
<p>4.配置webpack插件。</p>
<p>5.gzip模式下的webpack插件配置。</p>
<p>6.webpack-bundle分析。</p>
<p>注：webpack插件里面使用了压缩代码以及抽离css文件等插件。</p>
<hr>
<h2 id="config文件夹"><a href="/2018/02/10/vue-cli/#config文件夹" class="headerlink" title="config文件夹"></a>config文件夹</h2><h3 id="index-js"><a href="/2018/02/10/vue-cli/#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// 使用 NodeJS 自带的文件路径插件</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // production 环境</span><br><span class="line">  build: &#123;</span><br><span class="line">    // 使用 config/prod.env.js 中定义的编译环境</span><br><span class="line">    env: require(&apos;./prod.env&apos;),</span><br><span class="line">    // 编译输入的 index.html 文件</span><br><span class="line">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class="line">    // 编译输出的静态资源根路径</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class="line">    // 编译输出的二级目录</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class="line">    assetsPublicPath: &apos;./&apos;,</span><br><span class="line">    // 是否开启 cssSourceMap</span><br><span class="line">    productionSourceMap: true,</span><br><span class="line">    // Gzip off by default as many popular static hosts such as</span><br><span class="line">    // Surge or Netlify already gzip all static assets for you.</span><br><span class="line">    // Before setting to `true`, make sure to:</span><br><span class="line">    // npm install --save-dev compression-webpack-plugin</span><br><span class="line">    // 是否开启 gzip,默认不开启</span><br><span class="line">    productionGzip: false,</span><br><span class="line">    // gzip模式下需要压缩的文件的扩展名</span><br><span class="line">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class="line">    // Run the build command with an extra argument to</span><br><span class="line">    // View the bundle analyzer report after build finishes:</span><br><span class="line">    // `npm run build --report`</span><br><span class="line">    // Set to `true` or `false` to always turn it on or off</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">  &#125;,</span><br><span class="line">  // dev 环境</span><br><span class="line">  dev: &#123;</span><br><span class="line">    // 使用 config/dev.env.js 中定义的编译环境</span><br><span class="line">    env: require(&apos;./dev.env&apos;),</span><br><span class="line">    // 运行测试页面的端口</span><br><span class="line">    port: 8087,</span><br><span class="line">    // 启动dev-server之后自动打开浏览器</span><br><span class="line">    autoOpenBrowser: true,</span><br><span class="line">    // 编译输出的二级目录</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    // 需要 proxyTable 代理的接口（可跨域）</span><br><span class="line">    proxyTable: &#123;&#125;,</span><br><span class="line">    //静态网址</span><br><span class="line">    /*proxyTable: &#123;</span><br><span class="line"></span><br><span class="line">      // 下面的示例将代理请求/api/posts/1到http://jsonplaceholder.typicode.com/posts/1。</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">        target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //changeOrigin:true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。</span><br><span class="line">    // 除了静态网址之外，您还可以使用glob模式来匹配URL，例如/api/**。有关详细信息，请参阅上下文匹配。</span><br><span class="line">    // 此外，您可以提供一个filter可以是自定义函数的选项，以确定请求是否应被代理：</span><br><span class="line">    /*proxyTable: &#123;</span><br><span class="line">      &apos;*&apos;: &#123;</span><br><span class="line">            target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class="line">            filter: function (pathname, req) &#123;</span><br><span class="line">              return pathname.match(&apos;^/api&apos;) &amp;&amp; req.method === &apos;GET&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class="line">    // with this option, according to the CSS-Loader README</span><br><span class="line">    // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class="line">    // In our experience, they generally work as expected,</span><br><span class="line">    // just be aware of this issue when enabling this option.</span><br><span class="line">    // 是否开启 cssSourceMap</span><br><span class="line">    cssSourceMap: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文件配置了开发和生产两种环境下的配置。</p>
<hr>
<h2 id="总结"><a href="/2018/02/10/vue-cli/#总结" class="headerlink" title="总结"></a>总结</h2><p>webpack的使用博大精深，仅仅了解到这里也只是入门。代码可以直接到我的github直接拉取，仓库地址<a href="https://github.com/HeyingYe/vue-structural-analysis" target="_blank" rel="noopener">https://github.com/HeyingYe/vue-structural-analysis</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
